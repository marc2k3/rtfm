{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This component for foobar2000 is based on WSH Panel Mod.</p> <p>It allows the creation of customisable panels that can be written with <code>JavaScript</code> rather than the <code>C++</code> required by the foobar2000 SDK.</p> <p>Under the hood, it uses <code>Windows Script Host</code>. Because of this, JS language support is limited to <code>ECMAScript 5</code>. Nothing newer will ever be supported.</p> <p>Here are just some of the features provided by the component...</p> <ul> <li>Custom drawing of text, external images, lines, rectangles, etc.</li> <li>Use fonts/colours from the main preferences of whichever user interface you are using.</li> <li>Executing main/context menu commands.</li> <li>Ability to create custom buttons/menus.</li> <li>Capture keystrokes/mouse movement/clicks.</li> <li>Callbacks can be used to trigger code based on various <code>foobar2000</code>, <code>Windows</code> and <code>Component</code> events.</li> <li>Read/write file tags.</li> <li>Complete manipulation of playlists.</li> <li>Media Library display/sorting/filtering</li> <li>Save settings on a per panel basis. These persist between restarts and are stored inside the layout configuration file for whichever UI your are using. You can also write your own functions to load/save settings from <code>JSON</code> or plain text files.</li> <li>Built in support for making <code>GET / POST</code> requests which return plain text and there is also a method for downloading binary files. If you prefer, you can use the <code>Microsoft.XMLHTTP</code> <code>ActiveX</code> object.</li> <li>There are many built in methods for working with the local filesystem, launching external applications etc. Previous versions / other scripting components rely on <code>ActiveX</code> objects but the need for those is greatly reduced.</li> <li>And much more...</li> </ul>"},{"location":"configuration-window/","title":"Configuration Window","text":"<p>Right click any panel&gt;<code>Configure</code> to open the <code>Configuration Window</code>.</p> <p>Note</p> <p>Some scripts may implement their own menu without a <code>Configure</code> option. If this happens, you can hold down the Shift+Win keys and then right click. This always brings up the default menu.</p> <p></p> <p>Using the <code>Code</code> button you can access the following commands which should be self-explanatory.</p> <ul> <li><code>Reset</code></li> <li><code>Import</code></li> <li><code>Export</code></li> </ul> <p>Use the <code>Style</code> button to change the Editor Properties.</p> <p>Use the <code>Samples</code> button to quickly choose any of the included scripts.</p>"},{"location":"configuration-window/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"Ctrl+0 Reset zoom. Change using Ctrl and the mouse wheel. Ctrl+F Open<code>Find</code> dialog Ctrl+G Open <code>Go To Line</code> dialog Ctrl+H Open <code>Replace</code> dialog Ctrl+S Apply F3 Find next Shift+F3 Find previous"},{"location":"configuration-window/#editor-properties","title":"Editor Properties","text":"<p>For <code>styles</code>, you can combine any of the following options separated by a comma.</p> font:NAME size:PIXELS bold italics fore:HEX_COLOUR back:HEX_COLOUR <p>Hex colours must be the full 6 digits like <code>#FF0000</code>.</p> <p><code>colour.caret.fore</code> and <code>colour.selection.back</code> can be hex colours only.</p>"},{"location":"installation/","title":"Requirements & Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>foobar2000 <code>2.25</code> or later. <code>Windows 10</code> or later.</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>https://wiki.hydrogenaud.io/index.php?title=Foobar2000:How_to_install_a_component</p> <p>It is assumed you know how to add panels to your layout. Basic guides can be found below.</p> <p>Default UI</p> <p>Columns UI</p>"},{"location":"installation/#samples","title":"Samples","text":"<p>Since the learning curve for writing your own scripts is quite steep, there are many included samples that don't require any knowledge at all. You can simply pick the one you want to use from the <code>Samples</code> button in the Configuration Window.</p> <p>The Gallery has recently been updated with more detailed setup notes / usage instructions.</p>"},{"location":"preprocessors/","title":"Preprocessors","text":"<p>Using a preprocessor section is not mandatory but it is useful for identifying scripts and loading external files so common code can be reused without having to update each panel instance.</p> <p>The section should start with <code>==PREPROCESSOR==</code> and end with <code>==/PREPROCESSOR==</code>.</p> <pre><code>// ==PREPROCESSOR==\n// ...\n// ==/PREPROCESSOR==\n</code></pre> <p>A full example might look something like this: <pre><code>// ==PREPROCESSOR==\n// @name \"my sooper dooper script\"\n// @author \"marc\"\n// @version \"0.1\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// @import \"%fb2k_profile_path%scripts\\main.js\"\n// ==/PREPROCESSOR==\n</code></pre></p> <p>Each directive is case sensitive. It should be started with <code>@</code> and placed into a single comment.</p> <pre><code>// @directive \"value here\"\n</code></pre>"},{"location":"preprocessors/#directives","title":"Directives","text":""},{"location":"preprocessors/#name","title":"Name","text":"<pre><code>// @name \"name\"\n</code></pre> <p>Note</p> <p>If you set a name here, it's also available in script via <code>window.Name</code>. You can use it to prefix console messages or use for titles on various dialog boxes.</p>"},{"location":"preprocessors/#version","title":"Version","text":"<pre><code>// @version \"version\"\n</code></pre>"},{"location":"preprocessors/#author","title":"Author","text":"<pre><code>// @author \"author\"\n</code></pre>"},{"location":"preprocessors/#import","title":"Import","text":"<pre><code>// @import \"path\"\n</code></pre> <p>Load external script from <code>path</code>. These files should be <code>UTF8</code> only. You can place <code>%fb2k_component_path%</code> or <code>%fb2k_profile_path%</code> in to <code>path</code>. They will be expanded while parsing.</p> <p>As the full example above illustrates, always put your own files in a sub-folder of your <code>foobar2000</code> profile folder. Do not use the component folder as files would be lost on component upgrades.</p>"},{"location":"tips/","title":"Tips","text":"<ul> <li>Always check the method arguments for the type/range of values you can supply. Over the years, internal validation has got stricter and errors may be thrown when they were silently ignored before.</li> <li>If anything goes wrong, check the popup window/console. It should tell you where the code is that caused the error.</li> <li>Never call <code>window.Repaint()</code> or <code>window.RepaintRect()</code> from the <code>on_size</code> callback.</li> <li>Consider using <code>Dispose()</code> methods where you can to free up memory.</li> <li>Remember to retrieve <code>window.Width</code> and <code>window.Height</code> in the <code>on_size</code> callback because their values during startup is not reliable.</li> <li>You should not create objects inside the <code>on_paint</code> callback since it will be called frequently. For example, <code>utils.LoadImage</code> and <code>fb.TitleFormat</code> should never be used there. Ideally, these objects should be created once on startup.</li> </ul>"},{"location":"api/flags/","title":"Flags","text":"<p>All of these are provided in <code>helpers.txt</code> bundled with the component. You can import it like this.</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n</code></pre> <p>See Preprocessors.</p>"},{"location":"api/flags/#dwrite_font_weight","title":"DWRITE_FONT_WEIGHT","text":"<pre><code>var DWRITE_FONT_WEIGHT_THIN = 100;\nvar DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200;\nvar DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200;\nvar DWRITE_FONT_WEIGHT_LIGHT = 300;\nvar DWRITE_FONT_WEIGHT_SEMI_LIGHT = 350;\nvar DWRITE_FONT_WEIGHT_NORMAL = 400;\nvar DWRITE_FONT_WEIGHT_REGULAR = 400;\nvar DWRITE_FONT_WEIGHT_MEDIUM = 500;\nvar DWRITE_FONT_WEIGHT_DEMI_BOLD = 600;\nvar DWRITE_FONT_WEIGHT_SEMI_BOLD = 600;\nvar DWRITE_FONT_WEIGHT_BOLD = 700;\nvar DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800;\nvar DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800;\nvar DWRITE_FONT_WEIGHT_BLACK = 900;\nvar DWRITE_FONT_WEIGHT_HEAVY = 900;\nvar DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950;\nvar DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950;\n</code></pre>"},{"location":"api/flags/#dwrite_font_style","title":"DWRITE_FONT_STYLE","text":"<pre><code>var DWRITE_FONT_STYLE_NORMAL = 0;\nvar DWRITE_FONT_STYLE_OBLIQUE = 1;\nvar DWRITE_FONT_STYLE_ITALIC = 2;\n</code></pre>"},{"location":"api/flags/#dwrite_font_stretch","title":"DWRITE_FONT_STRETCH","text":"<pre><code>var DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1;\nvar DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2;\nvar DWRITE_FONT_STRETCH_CONDENSED = 3;\nvar DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4;\nvar DWRITE_FONT_STRETCH_NORMAL = 5;\nvar DWRITE_FONT_STRETCH_MEDIUM = 5;\nvar DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6;\nvar DWRITE_FONT_STRETCH_EXPANDED = 7;\nvar DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8;\nvar DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9;\n</code></pre>"},{"location":"api/flags/#dwrite_text_alignment","title":"DWRITE_TEXT_ALIGNMENT","text":"<pre><code>var DWRITE_TEXT_ALIGNMENT_LEADING = 0;\nvar DWRITE_TEXT_ALIGNMENT_TRAILING = 1;\nvar DWRITE_TEXT_ALIGNMENT_CENTER = 2;\nvar DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3;\n</code></pre>"},{"location":"api/flags/#dwrite_paragraph_alignment","title":"DWRITE_PARAGRAPH_ALIGNMENT","text":"<pre><code>var DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0;\nvar DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1;\nvar DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2;\n</code></pre>"},{"location":"api/flags/#dwrite_word_wrapping","title":"DWRITE_WORD_WRAPPING","text":"<pre><code>var DWRITE_WORD_WRAPPING_WRAP = 0;\nvar DWRITE_WORD_WRAPPING_NO_WRAP = 1;\nvar DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2;\nvar DWRITE_WORD_WRAPPING_WHOLE_WORD = 3;\nvar DWRITE_WORD_WRAPPING_CHARACTER = 4;\n</code></pre>"},{"location":"api/flags/#dwrite_trimming_granularity","title":"DWRITE_TRIMMING_GRANULARITY","text":"<pre><code>var DWRITE_TRIMMING_GRANULARITY_NONE = 0;\nvar DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1;\nvar DWRITE_TRIMMING_GRANULARITY_WORD = 2;\n</code></pre>"},{"location":"api/flags/#wicbitmaptransform","title":"WICBitmapTransform","text":"<pre><code>var WICBitmapTransformRotate0 = 0;\nvar WICBitmapTransformRotate90 = 1;\nvar WICBitmapTransformRotate180 = 2;\nvar WICBitmapTransformRotate270 = 3;\nvar WICBitmapTransformFlipHorizontal = 8;\nvar WICBitmapTransformFlipVertical = 16;\n</code></pre>"},{"location":"api/flags/#messagebox-buttons","title":"MessageBox Buttons","text":"<pre><code>var MB_OK = 0;\nvar MB_OKCANCEL = 1;\nvar MB_ABORTRETRYIGNORE = 2;\nvar MB_YESNOCANCEL = 3;\nvar MB_YESNO = 4;\n</code></pre>"},{"location":"api/flags/#messagebox-icons","title":"MessageBox Icons","text":"<pre><code>var MB_ICONHAND = 16;\nvar MB_ICONQUESTION = 32;\nvar MB_ICONEXCLAMATION = 48;\nvar MB_ICONASTERISK = 64;\n</code></pre>"},{"location":"api/flags/#messagebox-return-values","title":"MessageBox Return Values","text":"<pre><code>var IDOK = 1;\nvar IDCANCEL = 2;\nvar IDABORT = 3;\nvar IDRETRY = 4;\nvar IDIGNORE = 5;\nvar IDYES = 6;\nvar IDNO = 7;\n</code></pre>"},{"location":"api/flags/#appendmenuitem-flags","title":"AppendMenuItem Flags","text":"<pre><code>var MF_SEPARATOR = 0x00000800;\nvar MF_ENABLED = 0x00000000;\nvar MF_GRAYED = 0x00000001;\nvar MF_DISABLED = 0x00000002;\nvar MF_UNCHECKED = 0x00000000;\nvar MF_CHECKED = 0x00000008;\nvar MF_STRING = 0x00000000;\nvar MF_MENUBARBREAK = 0x00000020;\nvar MF_MENUBREAK = 0x00000040;\n// var MF_BITMAP; // do not use\n// var MF_OWNERDRAW // do not use\n// var MF_POPUP // do not use\n</code></pre> <p>https://docs.microsoft.com/en-gb/windows/win32/api/winuser/nf-winuser-appendmenua</p>"},{"location":"api/flags/#trackpopupmenu-flags","title":"TrackPopupMenu Flags","text":"<pre><code>var TPM_LEFTALIGN = 0x0000;\nvar TPM_CENTERALIGN = 0x0004;\nvar TPM_RIGHTALIGN = 0x0008;\nvar TPM_TOPALIGN = 0x0000;\nvar TPM_VCENTERALIGN = 0x0010;\nvar TPM_BOTTOMALIGN = 0x0020;\nvar TPM_HORIZONTAL = 0x0000;\nvar TPM_VERTICAL = 0x0040;\nvar TPM_HORPOSANIMATION = 0x0400;\nvar TPM_HORNEGANIMATION = 0x0800;\nvar TPM_VERPOSANIMATION = 0x1000;\nvar TPM_VERNEGANIMATION = 0x2000;\nvar TPM_NOANIMATION = 0x4000;\n</code></pre> <p>https://docs.microsoft.com/en-gb/windows/win32/api/winuser/nf-winuser-trackpopupmenu</p>"},{"location":"api/flags/#mouse-mask-values","title":"Mouse Mask Values","text":"<pre><code>var MK_LBUTTON = 0x0001;\nvar MK_RBUTTON = 0x0002;\nvar MK_SHIFT = 0x0004;\nvar MK_CONTROL = 0x0008;\nvar MK_MBUTTON = 0x0010;\nvar MK_XBUTTON1 = 0x0020;\nvar MK_XBUTTON2 = 0x0040;\n</code></pre>"},{"location":"api/flags/#setcursor-values","title":"SetCursor Values","text":"<pre><code>var IDC_ARROW = 32512;\nvar IDC_IBEAM = 32513;\nvar IDC_WAIT = 32514;\nvar IDC_CROSS = 32515;\nvar IDC_UPARROW = 32516;\nvar IDC_SIZE = 32640;\nvar IDC_ICON = 32641;\nvar IDC_SIZENWSE = 32642;\nvar IDC_SIZENESW = 32643;\nvar IDC_SIZEWE = 32644;\nvar IDC_SIZENS = 32645;\nvar IDC_SIZEALL = 32646;\nvar IDC_NO = 32648;\nvar IDC_APPSTARTING = 32650;\nvar IDC_HAND = 32649;\nvar IDC_HELP = 32651;\n</code></pre>"},{"location":"api/flags/#file_attribute","title":"FILE_ATTRIBUTE","text":"<pre><code>var FILE_ATTRIBUTE_READONLY = 0x00000001;\nvar FILE_ATTRIBUTE_HIDDEN = 0x00000002;\nvar FILE_ATTRIBUTE_SYSTEM = 0x00000004;\nvar FILE_ATTRIBUTE_DIRECTORY = 0x00000010;\nvar FILE_ATTRIBUTE_ARCHIVE = 0x00000020;\nvar FILE_ATTRIBUTE_NORMAL = 0x00000080;\nvar FILE_ATTRIBUTE_TEMPORARY = 0x00000100;\nvar FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200;\nvar FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;\nvar FILE_ATTRIBUTE_COMPRESSED = 0x00000800;\nvar FILE_ATTRIBUTE_OFFLINE = 0x00001000;\nvar FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000;\nvar FILE_ATTRIBUTE_ENCRYPTED = 0x00004000;\n// var FILE_ATTRIBUTE_DEVICE // do not use\n// var FILE_ATTRIBUTE_VIRTUAL // do not use\n</code></pre> <p>http://msdn.microsoft.com/en-us/library/ee332330%28VS.85%29.aspx</p>"},{"location":"api/flags/#keyboard-mask-values","title":"Keyboard Mask Values","text":"<pre><code>var VK_BACK = 0x08;\nvar VK_TAB = 0x09;\nvar VK_RETURN = 0x0D;\nvar VK_SHIFT = 0x10;\nvar VK_CONTROL = 0x11;\nvar VK_ALT = 0x12;\nvar VK_ESCAPE = 0x1B;\nvar VK_PGUP = 0x21;\nvar VK_PGDN = 0x22;\nvar VK_END = 0x23;\nvar VK_HOME = 0x24;\nvar VK_LEFT = 0x25;\nvar VK_UP = 0x26;\nvar VK_RIGHT = 0x27;\nvar VK_DOWN = 0x28;\nvar VK_INSERT = 0x2D;\nvar VK_DELETE = 0x2E;\nvar VK_SPACEBAR = 0x20;\n</code></pre>"},{"location":"api/flags/#albumartid","title":"AlbumArtId","text":"<pre><code>var AlbumArtId = {\n    front : 0,\n    back : 1,\n    disc : 2,\n    icon : 3,\n    artist : 4,\n};\n</code></pre>"},{"location":"api/flags/#albumarttype","title":"AlbumArtType","text":"<pre><code>var AlbumArtType = {\n    embedded : 0,\n    default : 1,\n    stub : 2,\n};\n</code></pre>"},{"location":"api/flags/#colourtype","title":"ColourType","text":"<pre><code>var ColourType = {\n    text : 0,\n    background : 1,\n    highlight : 2,\n    selection : 3,\n};\n</code></pre>"},{"location":"api/flags/#fonttype","title":"FontType","text":"<pre><code>var FontType = {\n    defaults : 0,\n    tabs : 1,\n    lists : 2,\n    playlists : 3,\n    statusbar : 4,\n    console : 5,\n};\n</code></pre>"},{"location":"api/flags/#playlistlockfiltermask","title":"PlaylistLockFilterMask","text":"<pre><code>var PlaylistLockFilterMask = {\n    filter_add : 1,\n    filter_remove : 2,\n    filter_reorder : 4,\n    filter_replace : 8,\n    filter_rename : 16,\n    filter_remove_playlist : 32,\n};\n</code></pre>"},{"location":"api/flags/#replaygainmode","title":"ReplaygainMode","text":"<pre><code>var ReplaygainMode = {\n    None : 0,\n    Track : 1,\n    Album : 2,\n    Track_Album_By_Playback_Order : 3,\n};\n</code></pre>"},{"location":"api/flags/#playbackorder","title":"PlaybackOrder","text":"<pre><code>var PlaybackOrder = {\n    Default : 0,\n    Repeat_Playlist : 1,\n    Repeat_Track : 2,\n    Random : 3,\n    Shuffle_tracks : 4,\n    Shuffle_albums : 5,\n    Shuffle_folders : 6,\n};\n</code></pre>"},{"location":"api/flags/#playbackqueueorigin","title":"PlaybackQueueOrigin","text":"<pre><code>var PlaybackQueueOrigin = {\n    user_added : 0,\n    user_removed : 1,\n    playback_advance : 2,\n};\n</code></pre>"},{"location":"api/flags/#playbackstartingcmd","title":"PlaybackStartingCMD","text":"<pre><code>var PlaybackStartingCMD = {\n    default : 0,\n    play : 1,\n    next : 2,\n    prev : 3,\n    settrack : 4,\n    rand : 5,\n    resume : 6,\n};\n</code></pre>"},{"location":"api/flags/#playbackstopreason","title":"PlaybackStopReason","text":"<pre><code>var PlaybackStopReason = {\n    user : 0,\n    eof : 1,\n    starting_another : 2,\n};\n</code></pre>"},{"location":"api/flags/#selectiontype","title":"SelectionType","text":"<pre><code>var SelectionType = {\n    undefined : 0,\n    active_playlist_selection : 1,\n    caller_active_playlist : 2,\n    playlist_manager : 3,\n    now_playing : 4,\n    keyboard_shortcut_list : 5,\n    media_library_viewer : 6,\n};\n</code></pre>"},{"location":"api/callbacks/","title":"Overview","text":"<p>Note</p> <p>You should only use callbacks that contain code you want to run.</p> <p>It's not good practice to include empty callbacks like this: <pre><code>function on_always_on_top_changed(state) {\n\n}\n</code></pre></p> <p>Check these pages for callback documentation which has recently been split into separate categories:</p> <p>Component</p> <p>Windows</p> <p>foobar2000</p>"},{"location":"api/callbacks/component/","title":"Component","text":""},{"location":"api/callbacks/component/#on_download_file_donepath-success-error_text","title":"<code>on_download_file_done(path, success, error_text)</code>","text":"Arguments path <code>string</code> The path that was originally supplied to utils.DownloadFileAsync. success <code>boolean</code> If <code>true</code> it means the web request was succesful and the file was saved correctly. error_text <code>string</code> Empty if success is <code>true</code>. If success is <code>false</code>, it should describe what went wrong. <p>Called when thread created by utils.DownloadFileAsync is done.</p>"},{"location":"api/callbacks/component/#on_download_image_doneurl-image","title":"<code>on_download_image_done(url, image)</code>","text":"Arguments url <code>string</code> The url that was originally supplied to utils.DownloadImageAsync. image IJSImage Could be <code>null</code> on failure. <p>Called when thread created by utils.DownloadImageAsync is done.</p>"},{"location":"api/callbacks/component/#on_get_album_art_donehandle-art_id-image","title":"<code>on_get_album_art_done(handle, art_id, image)</code>","text":"Arguments handle IMetadbHandle art_id <code>number</code> image IJSImage Could be <code>null</code> on failure. <p>Called when thread created by IMetadbHandle GetAlbumArtAsync or IMetadbHandle GetAlbumArtThumbAsync is done.</p>"},{"location":"api/callbacks/component/#on_http_request_donetask_id-success-response_text-status-response_headers","title":"<code>on_http_request_done(task_id, success, response_text, status, response_headers)</code>","text":"Arguments task_id <code>number</code> The return value from the original utils.HTTPRequestAsync call. success <code>boolean</code> If <code>true</code>, it doesn't necessarily mean <code>HTTP</code> status <code>200</code> but it indicates the request was completed succesfully so the <code>response text</code> is from the server. response_text <code>string</code> status <code>number</code> Will be <code>0</code> if the server was unreachable otherwise it should be the <code>HTTP</code> status code. response_headers <code>string</code> This is a stringified <code>JSON</code> object so you need to use <code>JSON.parse</code> to access it. It's only valid if <code>success</code> was <code>true</code>. <p>Called when thread created by utils.HTTPRequestAsync is done.</p> <p>See Web Requests for examples.</p>"},{"location":"api/callbacks/component/#on_locations_addedtask_id-handle_list","title":"<code>on_locations_added(task_id, handle_list)</code>","text":"Arguments task_id <code>number</code> The return value from the original fb.AddLocationsAsync call. handle_list IMetadbHandleList <p>Called when thread created by fb.AddLocationsAsync is done.</p>"},{"location":"api/callbacks/component/#on_main_menuindex","title":"<code>on_main_menu(index)</code>","text":"Arguments index <code>number</code> <p>On the main menu <code>File&gt;JScript Panel</code>, there are 10 menu items and whichever number is selected is sent as the <code>index</code> to this callback.</p> <p>Being main menu items now means you can bind them to global keyboard shortcuts, standard toolbar buttons, etc.</p> <p>Remember to think carefully about where you use this code as you probably only want it to run once so don't include it in common files and scripts where you might have multiple instances. Also, you should avoid sharing scripts containing this code so as not to conflict with what other users may already be using.</p> <p>Example</p> <pre><code>function on_main_menu(index) {\n    switch (index) {\n    case 1: // triggered when File&gt;JScript Panel&gt;1 is run\n        do_something();\n        break;\n    case 2: // triggered when File&gt;JScript Panel&gt;2 is run\n        do_something_else();\n        break;\n    }\n}\n</code></pre>"},{"location":"api/callbacks/component/#on_notify_dataname-info","title":"<code>on_notify_data(name, info)</code>","text":"Arguments name <code>string</code> info <code>string</code>, <code>number</code>, <code>array</code>, <code>object</code> <p>Called in other panels after window.NotifyOthers is executed.</p>"},{"location":"api/callbacks/component/#on_run_cmd_async_donetask_id","title":"<code>on_run_cmd_async_done(task_id)</code>","text":"Arguments task_id <code>number</code> The return value from the original utils.RunCmdAsync call."},{"location":"api/callbacks/component/#on_script_unload","title":"<code>on_script_unload()</code>","text":"<p>Should always be called when:</p> <ul> <li>scripts are reloaded from the context menu / <code>window.Reload</code></li> <li>the OK/Apply buttons are used in the Configuration Window.</li> <li>panels are removed/replaced in layout editing mode</li> <li>foobar2000 exits normally</li> </ul> <p>It will not be called if a script throws an error or foobar2000 terminates abnormally.</p> <p>Note</p> <p>You do not need to clear timers or deactivate tooltips here. The component handles this automatically.</p> <p>Note</p> <p>Do not try to use <code>window.SetProperty</code> here. When shutting down, the layout data which stores persistent properties has already been written to file and changes will not be saved.</p>"},{"location":"api/callbacks/foobar2000/","title":"foobar2000","text":""},{"location":"api/callbacks/foobar2000/#on_always_on_top_changedstate","title":"<code>on_always_on_top_changed(state)</code>","text":"Arguments state <code>boolean</code> <p>Called when <code>Always On Top</code> state is changed.</p>"},{"location":"api/callbacks/foobar2000/#on_colours_changed","title":"<code>on_colours_changed()</code>","text":"<p>Called when colours are changed via <code>Default UI</code> / <code>Columns UI</code> preferences.</p>"},{"location":"api/callbacks/foobar2000/#on_console_refresh","title":"<code>on_console_refresh</code>","text":"<p>Called whenever new messages appear in the foobar2000 <code>Console</code>.</p>"},{"location":"api/callbacks/foobar2000/#on_cursor_follow_playback_changedstate","title":"<code>on_cursor_follow_playback_changed(state)</code>","text":"Arguments state <code>boolean</code> <p>Called when <code>Cursor follow playback</code> state is changed.</p>"},{"location":"api/callbacks/foobar2000/#on_dsp_preset_changed","title":"<code>on_dsp_preset_changed()</code>","text":"<p>Called when DSP preset changes but does not get called when presets are added or removed.</p>"},{"location":"api/callbacks/foobar2000/#on_font_changed","title":"<code>on_font_changed()</code>","text":"<p>Called when fonts are changed via <code>Default UI</code> / <code>Columns UI</code> preferences.</p>"},{"location":"api/callbacks/foobar2000/#on_item_focus_changeplaylistindex-from-to","title":"<code>on_item_focus_change(playlistIndex, from, to)</code>","text":"Arguments playlistIndex <code>number</code> from <code>number</code> to <code>number</code> <p>Called when playlist focus has changed.</p>"},{"location":"api/callbacks/foobar2000/#on_item_playedhandle","title":"<code>on_item_played(handle)</code>","text":"Arguments handle IMetadbHandle <p>Called when at least one minute of the track has been played or the track has reached its end after at least one third of it has been played.</p>"},{"location":"api/callbacks/foobar2000/#on_library_initialised","title":"<code>on_library_initialised()</code>","text":"<p>Called when the <code>foobar2000</code> library is initialised on startup. Prior to <code>foobar2000</code> <code>2.0</code>, the library was always ready immediately but that is not the case now.</p>"},{"location":"api/callbacks/foobar2000/#on_library_items_addedhandle_list","title":"<code>on_library_items_added(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList"},{"location":"api/callbacks/foobar2000/#on_library_items_changedhandle_list-fromhook","title":"<code>on_library_items_changed(handle_list, fromhook)</code>","text":"Arguments handle_list IMetadbHandleList fromhook <code>boolean</code> <code>true</code> if changes comes from <code>Playback Statistics</code> or other components that utilise the same DB functionality."},{"location":"api/callbacks/foobar2000/#on_library_items_removedhandle_list","title":"<code>on_library_items_removed(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList"},{"location":"api/callbacks/foobar2000/#on_metadb_changedhandle_list-fromhook","title":"<code>on_metadb_changed(handle_list, fromhook)</code>","text":"Arguments handle_list IMetadbHandleList fromhook <code>boolean</code> <code>true</code> if changes comes from <code>Playback Statistics</code> or other components that utilise the same DB functionality. <p>Called when metadb contents change. This can be tag updates or database changes from <code>Playback Statistics</code> etc.</p>"},{"location":"api/callbacks/foobar2000/#on_output_device_changed","title":"<code>on_output_device_changed()</code>","text":"<p>Called when output device changes.</p>"},{"location":"api/callbacks/foobar2000/#on_playback_dynamic_info","title":"<code>on_playback_dynamic_info()</code>","text":"<p>Called when dynamic info such as VBR bitrate changes.</p>"},{"location":"api/callbacks/foobar2000/#on_playback_dynamic_info_track","title":"<code>on_playback_dynamic_info_track()</code>","text":"<p>Called when stream metadata changes.</p>"},{"location":"api/callbacks/foobar2000/#on_playback_editedhandle","title":"<code>on_playback_edited(handle)</code>","text":"Arguments handle IMetadbHandle <p>Called when currently playing file gets edited.</p>"},{"location":"api/callbacks/foobar2000/#on_playback_follow_cursor_changedstate","title":"<code>on_playback_follow_cursor_changed(state)</code>","text":"Arguments state <code>boolean</code> <p>Called when <code>Playback follow cursor</code> state is changed.</p>"},{"location":"api/callbacks/foobar2000/#on_playback_new_trackhandle","title":"<code>on_playback_new_track(handle)</code>","text":"Arguments handle IMetadbHandle"},{"location":"api/callbacks/foobar2000/#on_playback_order_changednew_order_index","title":"<code>on_playback_order_changed(new_order_index)</code>","text":"Arguments new_order_index PlaybackOrder <p>Called when playback order is changed.</p>"},{"location":"api/callbacks/foobar2000/#on_playback_pausestate","title":"<code>on_playback_pause(state)</code>","text":"Arguments state <code>boolean</code>"},{"location":"api/callbacks/foobar2000/#on_playback_queue_changedorigin","title":"<code>on_playback_queue_changed(origin)</code>","text":"Arguments origin PlaybackQueueOrigin"},{"location":"api/callbacks/foobar2000/#on_playback_seek","title":"<code>on_playback_seek()</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playback_startingcmd-is_paused","title":"<code>on_playback_starting(cmd, is_paused)</code>","text":"Arguments cmd PlaybackStartingCMD is_paused <code>boolean</code>"},{"location":"api/callbacks/foobar2000/#on_playback_stopreason","title":"<code>on_playback_stop(reason)</code>","text":"Arguments reason PlaybackStopReason"},{"location":"api/callbacks/foobar2000/#on_playback_timetime","title":"<code>on_playback_time(time)</code>","text":"Arguments time <code>number</code> <p>Called every second while playing for time display.</p>"},{"location":"api/callbacks/foobar2000/#on_playlist_item_ensure_visibleplaylistindex-playlistitemindex","title":"<code>on_playlist_item_ensure_visible(playlistIndex, playlistItemIndex)</code>","text":"Arguments playlistIndex <code>number</code> playlistItemIndex <code>number</code> <p>Called when the status bar is double clicked while playing. Also called by the main menu <code>View/Show now playing in playlist</code>.</p>"},{"location":"api/callbacks/foobar2000/#on_playlist_items_addedplaylistindex","title":"<code>on_playlist_items_added(playlistIndex)</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlist_items_changedplaylistindex","title":"<code>on_playlist_items_changed(playlistIndex)</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlist_items_removedplaylistindex","title":"<code>on_playlist_items_removed(playlistIndex)</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlist_items_reorderedplaylistindex","title":"<code>on_playlist_items_reordered(playlistIndex)</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlist_items_replacedplaylistindex","title":"<code>on_playlist_items_replaced(playlistIndex)</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlist_items_selection_changeplaylistindex","title":"<code>on_playlist_items_selection_change(playlistIndex)</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlist_stop_after_current_changedstate","title":"<code>on_playlist_stop_after_current_changed(state)</code>","text":"Arguments state <code>boolean</code> <p>Called when <code>Stop after current</code> state is changed.</p>"},{"location":"api/callbacks/foobar2000/#on_playlist_switch","title":"<code>on_playlist_switch()</code>","text":""},{"location":"api/callbacks/foobar2000/#on_playlists_changed","title":"<code>on_playlists_changed()</code>","text":"<p>Called when</p> <ul> <li>playlists are added/removed/reordered/renamed.</li> <li>a playlist's lock status changes through the use of the built-in playlist lock methods or other components such as foo_utils or foo_playlist_attributes.</li> </ul>"},{"location":"api/callbacks/foobar2000/#on_replaygain_mode_changednew_mode","title":"<code>on_replaygain_mode_changed(new_mode)</code>","text":"Arguments new_mode ReplaygainMode"},{"location":"api/callbacks/foobar2000/#on_selection_changed","title":"<code>on_selection_changed()</code>","text":"<p>Called when selection changes based on <code>File&gt;Preferences&gt;Display&gt;Selection viewers</code>.</p>"},{"location":"api/callbacks/foobar2000/#on_stream_album_art_change","title":"<code>on_stream_album_art_change()</code>","text":"<p>Called when stream album art changes.</p>"},{"location":"api/callbacks/foobar2000/#on_volume_change","title":"<code>on_volume_change()</code>","text":""},{"location":"api/callbacks/windows/","title":"Windows","text":""},{"location":"api/callbacks/windows/#on_charcode","title":"<code>on_char(code)</code>","text":"Arguments code <code>number</code> UTF16 encoded char"},{"location":"api/callbacks/windows/#on_drag_dropaction-x-y-mask","title":"<code>on_drag_drop(action, x, y, mask)</code>","text":"Arguments action IDropAction x <code>number</code> y <code>number</code> mask <code>number</code>"},{"location":"api/callbacks/windows/#on_drag_enteraction-x-y-mask","title":"<code>on_drag_enter(action, x, y, mask)</code>","text":"Arguments action IDropAction x <code>number</code> y <code>number</code> mask <code>number</code>"},{"location":"api/callbacks/windows/#on_drag_leave","title":"<code>on_drag_leave()</code>","text":""},{"location":"api/callbacks/windows/#on_drag_overaction-x-y-mask","title":"<code>on_drag_over(action, x, y, mask)</code>","text":"Arguments action IDropAction x <code>number</code> y <code>number</code> mask <code>number</code>"},{"location":"api/callbacks/windows/#on_focusis_focused","title":"<code>on_focus(is_focused)</code>","text":"Arguments is_focused <code>boolean</code> <p>Called when the panel gets/loses focus.</p>"},{"location":"api/callbacks/windows/#on_key_downvkey","title":"<code>on_key_down(vkey)</code>","text":"Arguments vkey <code>number</code> https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes <p>Keyboard shortcuts defined in the main preferences are always executed first and are not passed to this callback.</p>"},{"location":"api/callbacks/windows/#on_key_upvkey","title":"<code>on_key_up(vkey)</code>","text":"Arguments vkey <code>number</code> https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes"},{"location":"api/callbacks/windows/#on_mouse_lbtn_dblclkx-y-mask","title":"<code>on_mouse_lbtn_dblclk(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_lbtn_downx-y-mask","title":"<code>on_mouse_lbtn_down(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_lbtn_upx-y-mask","title":"<code>on_mouse_lbtn_up(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_leave","title":"<code>on_mouse_leave()</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_mbtn_dblclkx-y-mask","title":"<code>on_mouse_mbtn_dblclk(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_mbtn_downx-y-mask","title":"<code>on_mouse_mbtn_down(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_mbtn_upx-y-mask","title":"<code>on_mouse_mbtn_up(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_movex-y-mask","title":"<code>on_mouse_move(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_rbtn_dblclkx-y-mask","title":"<code>on_mouse_rbtn_dblclk(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_rbtn_downx-y-mask","title":"<code>on_mouse_rbtn_down(x, y, mask)</code>","text":""},{"location":"api/callbacks/windows/#on_mouse_rbtn_upx-y-mask","title":"<code>on_mouse_rbtn_up(x, y, mask)</code>","text":"<p>You must return <code>true</code> if you want to suppress the default context menu. Use the Shift+Win keys to bypass user code and open default context menu.</p>"},{"location":"api/callbacks/windows/#on_mouse_wheelstep","title":"<code>on_mouse_wheel(step)</code>","text":"Arguments step <code>number</code>"},{"location":"api/callbacks/windows/#on_mouse_wheel_hstep","title":"<code>on_mouse_wheel_h(step)</code>","text":"Arguments step <code>number</code>"},{"location":"api/callbacks/windows/#on_paintgr","title":"<code>on_paint(gr)</code>","text":"Arguments gr IJSGraphics <p>Called when window is ready to draw.</p>"},{"location":"api/callbacks/windows/#on_size","title":"<code>on_size()</code>","text":"<p>Called when panel is resized.</p>"},{"location":"api/interfaces/IAudioChunk/","title":"IAudioChunk","text":"<p>Properties</p> ChannelConfig <code>number</code> ChannelCount <code>number</code> Data <code>VBArray</code> You need to use <code>toArray()</code> on this before using. SampleCount <code>number</code> SampleRate <code>number</code> <p>Note</p> <p>You must check the return value from <code>fb.GetAudioChunk</code> is valid before using.</p> <pre><code>// offset is optional, defaults to zero\nvar chunk = fb.GetAudioChunk(requested_length, offset);\n\nif (chunk) {\n    // chunk now has the following properties\n    // chunk.ChannelConfig\n    // chunk.ChannelCount\n    // chunk.SampleRate\n    // chunk.SampleCount\n    // chunk.Data\n\n    var data = chunk.Data.toArray();\n\n    var channel_count = chunk.ChannelCount;\n    for (var i = 0; i &lt; data.length; i += channel_count) {\n        // assuming stereo\n        var l = data[i];\n        var r = data[i + 1];\n    }\n}\n</code></pre> <p><code>IAudioChunk</code> is a simplified wrapper around this:</p> <p>https://github.com/marc2k3/foobar2000-sdk/blob/main/foobar2000/SDK/audio_chunk.h</p>"},{"location":"api/interfaces/IContextMenuManager/","title":"IContextMenuManager","text":"<p>Methods</p>"},{"location":"api/interfaces/IContextMenuManager/#buildmenumenu-base_id","title":"<code>BuildMenu(menu, base_id)</code>","text":"Arguments menu IMenuObj base_id <code>number</code> <p>No return value.</p>"},{"location":"api/interfaces/IContextMenuManager/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IContextMenuManager/#executebyidid","title":"<code>ExecuteByID(id)</code>","text":"Arguments id <code>number</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/interfaces/IContextMenuManager/#initcontexthandle_list","title":"<code>InitContext(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList <p>No return value.</p>"},{"location":"api/interfaces/IContextMenuManager/#initcontextplaylist","title":"<code>InitContextPlaylist()</code>","text":"<p>No return value.</p> <p>Shows playlist specific options that aren't available when passing a handle list to <code>InitContext</code>.</p>"},{"location":"api/interfaces/IContextMenuManager/#initnowplaying","title":"<code>InitNowPlaying()</code>","text":"<p>No return value.</p> <p>Example</p> <pre><code>// click panel to see context menu for playing track\nfunction on_mouse_lbtn_up(x, y) {\n    var menu = window.CreatePopupMenu();\n    var context = fb.CreateContextMenuManager();\n\n    if (fb.IsPlaying) {\n        context.InitNowPlaying();\n        context.BuildMenu(menu, 1);\n    }\n\n    var idx = menu.TrackPopupMenu(x, y);\n    if (idx &gt; 0) {\n        context.ExecuteByID(idx - 1);\n    }\n\n    menu.Dispose();\n    context.Dispose();\n}\n</code></pre>"},{"location":"api/interfaces/IDropAction/","title":"IDropAction","text":"<p>Properties</p> Base <code>number</code> write Effect <code>number</code> read, write Playlist <code>number</code> write ToSelect <code>boolean</code> write <p>To handle incoming files from other panels or Windows Explorer, there are 4 callbacks.</p> <pre><code>function on_drag_drop(action, x, y, mask) {}\nfunction on_drag_enter(action, x, y, mask) {}\nfunction on_drag_leave() {}\nfunction on_drag_over(action, x, y, mask) {}\n</code></pre> <p>First we'll look at the <code>action.Effect</code> property which is documented here.</p> <p>https://docs.microsoft.com/en-gb/windows/win32/com/dropeffect-constants</p> <p>Rather than set variables for <code>DROPEFFECT_NONE</code> and <code>DROPEFFECT_COPY</code>, I'll just use <code>0</code> and <code>1</code> in the examples below.</p> <p>When used inside the <code>on_drag_over</code> callback, it can be used to provide feedback to the user as to whether you can drop files there or not. If you set the value to <code>0</code>, the mouse pointer will change to show that dropping files is prohibited. To show that dropping files is allowed, we would use the value of <code>1</code>.</p> <p>If you had a playlist viewer script, usage could be as simple as this:</p> <p>Example</p> <pre><code>function on_drag_over(action, x, y, mask) {\n    var ap = plman.ActivePlaylist;\n    if (plman.PlaylistCount == 0 || ap == -1) {\n        // no playlists or active playlist not set\n        action.Effect = 0;\n    } else if (plman.IsAutoPlaylist(ap)) {\n        // autoplaylist, can't drop.\n        action.Effect = 0;\n    } else {\n        // ok, we can drop here.\n        action.Effect = 1;\n    }\n}\n</code></pre> <p>Note</p> <p>The example above does not take in to account playlist locks that prevent the addition of items to playlists that are not autoplaylists. You can read more about that here.</p> <p>When it comes to handling the dropped files inside <code>on_drag_drop</code>, we make use of the <code>Base</code>, <code>Playlist</code> and <code>ToSelect</code> properties listed above.</p> <p>We can use the exact same logic as before to set <code>action.Effect</code> as we need to do this so the <code>source</code> of our files gets notified of our intent. We should only ever use values of <code>0</code> or <code>1</code>.</p> <p>Example</p> <pre><code>function on_drag_drop(action, x, y, mask) {\n    var ap = plman.ActivePlaylist;\n    if (plman.PlaylistCount == 0 || ap == -1) {\n        // no playlists or active playlist not set\n        action.Effect = 0;\n    } else if (plman.IsAutoPlaylist(ap)) {\n        // autoplaylist, can't drop.\n        action.Effect = 0;\n    } else {\n        // use extra properties here\n        action.Playlist = ap;\n        // append to end\n        action.Base = plman.GetPlaylistItemCount(ap);\n        action.ToSelect = true;\n        action.Effect = 1;\n    }\n}\n</code></pre>"},{"location":"api/interfaces/IFileInfo/","title":"IFileInfo","text":"<p>This lets you iterate every available tag in a handle without knowing their name in advance.</p> <p>Example</p> <pre><code>var handle = fb.GetFocusItem();\n\nvar obj = {};\nvar f = handle.GetFileInfo();\n\nfor (var i = 0; i &lt; f.MetaCount; i++) {\n    var name = f.MetaName(i).toUpperCase();\n    obj[name] = [];\n\n    var num = f.MetaValueCount(i);\n    for (var j = 0; j &lt; num; j++) {\n        obj[name].push(f.MetaValue(i, j));\n    }\n}\n\nconsole.log(JSON.stringify(obj, null, 4));\n</code></pre> Example output<pre><code>{\n    \"ALBUM\": [\n        \"Chairlift at 6:15\"\n    ],\n    \"ARTIST\": [\n        \"Chairlift\"\n    ],\n    \"DATE\": [\n        \"2012-10-28\"\n    ],\n    \"MUSICBRAINZ_ALBUMID\": [\n        \"bc96af2e-11e9-4abe-a75b-2b91a5eff027\"\n    ],\n    \"MUSICBRAINZ_ARTISTID\": [\n        \"a3cd61ef-7fd4-44af-a27f-99641a82b22b\"\n    ],\n    \"MUSICBRAINZ_RELEASEGROUPID\": [\n        \"cb2114a7-87fb-44ea-8931-766b75840683\"\n    ],\n    \"MUSICBRAINZ_RELEASETRACKID\": [\n        \"008578a0-3188-31e5-887a-27194cecb069\"\n    ],\n    \"MUSICBRAINZ_TRACKID\": [\n        \"57632bd4-185d-40be-9c95-c3d690c697af\"\n    ],\n    \"RELEASETYPE\": [\n        \"EP\"\n    ],\n    \"TITLE\": [\n        \"I Belong in Your Arms (Japanese version)\"\n    ],\n    \"TOTALTRACKS\": [\n        \"6\"\n    ],\n    \"TRACKNUMBER\": [\n        \"6\"\n    ]\n}\n</code></pre> <p>Properties</p> MetaCount <code>number</code> read InfoCount <code>number</code> read <p>Example</p> <pre><code>console.log(f.MetaCount);\nconsole.log(f.InfoCount);\n</code></pre> <p>Methods</p>"},{"location":"api/interfaces/IFileInfo/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IFileInfo/#infofindname","title":"<code>InfoFind(name)</code>","text":"Arguments name <code>string</code> <p>Returns a <code>number</code> to indicate the info index or <code>-1</code> on failure.</p>"},{"location":"api/interfaces/IFileInfo/#infonameidx","title":"<code>InfoName(idx)</code>","text":"Arguments idx <code>number</code> <p>Returns a <code>string</code>.</p>"},{"location":"api/interfaces/IFileInfo/#infovalueidx","title":"<code>InfoValue(idx)</code>","text":"Arguments idx <code>number</code> <p>Returns a <code>string</code>.</p>"},{"location":"api/interfaces/IFileInfo/#metafindname","title":"<code>MetaFind(name)</code>","text":"Arguments name <code>string</code> <p>Returns a <code>number</code> to indicate the metadata index or <code>-1</code> on failure.</p>"},{"location":"api/interfaces/IFileInfo/#metanameidx","title":"<code>MetaName(idx)</code>","text":"Arguments idx <code>number</code> <p>Returns a <code>string</code>.</p> <p>Note</p> <p>The case of the tag name returned can be different depending on tag type so using <code>toLowerCase()</code> or <code>toUpperCase()</code> on the result is recommended.</p>"},{"location":"api/interfaces/IFileInfo/#metavalueidx-vidx","title":"<code>MetaValue(idx, vidx)</code>","text":"Arguments idx <code>number</code> vidx <code>number</code> <p>Returns a <code>string</code>.</p>"},{"location":"api/interfaces/IFileInfo/#metavaluecountidx","title":"<code>MetaValueCount(idx)</code>","text":"Arguments idx <code>number</code> <p>Returns a <code>number</code>.</p>"},{"location":"api/interfaces/IJSBitmap/","title":"IJSBitmap","text":"<p>Note</p> <p>The original <code>IJSImage</code> is perfectly fine for most normal usage except when refreshing the panel numerous times per second. A <code>IJSImage</code> instance is a wrapper around <code>IWICBitmap</code> from the <code>Windows SDK</code> and this has to be converted to an <code>ID2D1Bitmap</code> for rendering. Doing this repeatedly is ineffecient so this simplified interface creates an <code>ID2D1Bitmap</code> once and reuses it.</p> <p>See IJSImage CreateBitmap and utils.LoadBitmap.</p> <p>Properties</p> Height <code>number</code> read Width <code>number</code> read <p>Methods</p>"},{"location":"api/interfaces/IJSBitmap/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/","title":"IJSGraphics","text":"<p>Methods</p>"},{"location":"api/interfaces/IJSGraphics/#clearcolour","title":"<code>Clear(colour)</code>","text":"Arguments colour <code>number</code> <p>Clears entire panel with <code>colour</code>.</p> <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#drawbitmapbitmap-dstx-dsty-dstw-dsth-srcx-srcy-srcw-srch-opacity-angle","title":"<code>DrawBitmap(bitmap, dstX, dstY, dstW, dstH, srcX, srcY, srcW, srcH[, opacity, angle])</code>","text":"Arguments bitmap IJSBitmap dstX <code>number</code> dstY <code>number</code> dstW <code>number</code> dstH <code>number</code> srcX <code>number</code> srcY <code>number</code> srcW <code>number</code> srcH <code>number</code> opacity <code>number</code> Floating point number between <code>0</code> and <code>1</code>. Default <code>1</code>. angle <code>number</code> Default <code>0</code>. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#drawellipsecentrex-centrey-radiusx-radiusy-line_width-colour","title":"<code>DrawEllipse(centreX, centreY, radiusX, radiusY, line_width, colour)</code>","text":"Arguments centreX <code>number</code> centreY <code>number</code> radiusX <code>number</code> radiusY <code>number</code> line_width <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#drawimageimage-dstx-dsty-dstw-dsth-srcx-srcy-srcw-srch-opacity-angle","title":"<code>DrawImage(image, dstX, dstY, dstW, dstH, srcX, srcY, srcW, srcH[, opacity, angle])</code>","text":"Arguments image IJSImage dstX <code>number</code> dstY <code>number</code> dstW <code>number</code> dstH <code>number</code> srcX <code>number</code> srcY <code>number</code> srcW <code>number</code> srcH <code>number</code> opacity <code>number</code> Floating point number between <code>0</code> and <code>1</code>. Default <code>1</code>. angle <code>number</code> Default <code>0</code>. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#drawimagewithmaskimage-mask_image-x-y-w-h","title":"<code>DrawImageWithMask(image, mask_image, x, y, w, h)</code>","text":"Arguments image IJSImage mask_image IJSImage x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> <p>No return value.</p> <p>Example</p> <p>Because this method does not support src co-ords, this sample makes the original image square first which is more suitable for a circular mask. Also included is a text mask example.</p> <p>Unlike the previous <code>ApplyMask</code>, there should be no white background. Just draw black for where you want to keep.</p> <p>Mask images don't have to have the same width/height.</p> <pre><code>// ==PREPROCESSOR==\n// @name \"DrawImageWithMask\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar temp_gr;\n\nvar circular_mask = utils.CreateImage(512, 512);\ntemp_gr = circular_mask.GetGraphics();\ntemp_gr.FillEllipse(256, 256, 256, 256, RGB(0, 0, 0));\ncircular_mask.ReleaseGraphics();\ntemp_gr = null;\n\nvar text_mask = utils.CreateImage(512, 512);\ntemp_gr = text_mask.GetGraphics();\ntemp_gr.DrawRectangle(0, 0, 512, 512, 10, RGB(0, 0, 0));\ntemp_gr.WriteText(\"MASK\", JSON.stringify({Size:160,Weight:900}), RGB(0, 0, 0), 0, 0, 512, 512, 2, 2);\ntext_mask.ReleaseGraphics();\ntemp_gr = null;\n\nvar img = utils.LoadImage(fb.ComponentPath + 'samples\\\\images\\\\1.webp');\nvar square = make_square(img, 300);\n\nfunction make_square(img, size) {\n    if (!img) return null;\n\n    if (img.Width &lt; img.Height) {\n        var src_x = 0;\n        var src_w = img.Width;\n        var src_h = img.Width;\n        var src_y = Math.round((img.Height - src_h) / 4);\n    } else {\n        var src_y = 0;\n        var src_w = img.Height;\n        var src_h = img.Height;\n        var src_x = Math.round((img.Width - src_w) / 2);\n    }\n\n    var square = utils.CreateImage(size, size);\n    var temp_gr = square.GetGraphics();\n    temp_gr.DrawImage(img, 0, 0, size, size, src_x, src_y, src_w, src_h);\n    square.ReleaseGraphics();\n    return square;\n}\n\nfunction on_paint(gr) {\n    gr.Clear(RGB(255, 0, 0));\n    // original image as-is\n    gr.DrawImage(img, 0, 0, img.Width, img.Height, 0, 0, img.Width, img.Height);\n    // squared image, no mask\n    gr.DrawImage(square, 0, img.Height, square.Width, square.Height, 0, 0, square.Width, square.Height)\n    // squared image, circular mask\n    gr.DrawImageWithMask(square, circular_mask, 300, img.Height, square.Width, square.Height);\n    // squared image, text mask\n    gr.DrawImageWithMask(square, text_mask, 600, img.Height, square.Width, square.Height);\n}\n</code></pre>"},{"location":"api/interfaces/IJSGraphics/#drawlinex1-y1-x2-y2-line_width-colour","title":"<code>DrawLine(x1, y1, x2, y2, line_width, colour)</code>","text":"Arguments x1 <code>number</code> y1 <code>number</code> x2 <code>number</code> y2 <code>number</code> line_width <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#drawrectanglex-y-w-h-line_width-colour","title":"<code>DrawRectangle(x, y, w, h, line_width, colour)</code>","text":"Arguments x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> line_width <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#drawroundedrectanglex-y-w-h-radiusx-radiusy-line_width-colour","title":"<code>DrawRoundedRectangle(x, y, w, h, radiusX, radiusY, line_width, colour)</code>","text":"Arguments x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> radiusX <code>number</code> radiusY <code>number</code> line_width <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#fillellipsecentrex-centrey-radiusx-radiusy-colour","title":"<code>FillEllipse(centreX, centreY, radiusX, radiusY, colour)</code>","text":"Arguments centreX <code>number</code> centreY <code>number</code> radiusX <code>number</code> radiusY <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#fillrectanglex-y-w-h-colour","title":"<code>FillRectangle(x, y, w, h, colour)</code>","text":"Arguments x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#fillroundedrectanglex-y-w-h-radiusx-radiusy-colour","title":"<code>FillRoundedRectangle(x, y, w, h, radiusX, radiusY, colour)</code>","text":"Arguments x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> radiusX <code>number</code> radiusY <code>number</code> colour <code>number</code>,<code>string</code> This can be a solid colour or gradient. <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#poplayer","title":"<code>PopLayer()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#pushlayerx-y-w-h","title":"<code>PushLayer(x, y, w, h)</code>","text":"Arguments x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> <p>This introduces the concept of a layer. After calling <code>PushLayer</code> with the bounds of a rectangle, all following drawing operations are constrained within the bounds of that rectangle. You must call <code>PopLayer</code> when done.</p> <p>Example</p> <pre><code>function on_paint(gr) {\n    gr.PushLayer(50, 50, 100, 100);\n    // do stuff\n    gr.PopLayer();\n}\n</code></pre> <p>No return value.</p>"},{"location":"api/interfaces/IJSGraphics/#writetexttext-font-colour-x-y-w-h-text_alignment-paragraph_alignment-word_wrapping-trimming_granularity","title":"<code>WriteText(text, font, colour, x, y, w, h[, text_alignment, paragraph_alignment, word_wrapping, trimming_granularity])</code>","text":"Arguments text <code>string</code> font <code>string</code> See fonts. colour <code>number</code>, <code>string</code> See note below. x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> text_alignment DWRITE_TEXT_ALIGNMENT Default <code>0</code>. paragraph_alignment DWRITE_PARAGRAPH_ALIGNMENT Default <code>0</code>. word_wrapping DWRITE_WORD_WRAPPING Default <code>0</code>. trimming_granularity DWRITE_TRIMMING_GRANULARITY Default <code>0</code>. <p>No return value.</p> <p>Note</p> <p>The <code>font</code> must be in string form and this can come directly from using window.GetUIFont. See the dedicated Fonts page for how to create/manipulate your own. Using an array of fonts for styling substrings of the text is also supported. See Styling Ranges Of Text.</p> <p>Note</p> <p>If you want to apply a single colour to all of the text, simply supply a <code>number</code>.</p> <p>If supplying a <code>string</code>, it must be a stringified array. See Styling Ranges Of Text. <code>$rgb</code> code in the <code>text</code> always takes precedence so if an array is supplied at the same time, it will be ignored.</p>"},{"location":"api/interfaces/IJSGraphics/#writetextlayouttext_layout-colour-x-y-w-h-vertical_offset","title":"<code>WriteTextLayout(text_layout, colour, x, y, w, h, vertical_offset)</code>","text":"Arguments text_layout ITextLayout colour <code>number</code>, <code>string</code> See note below. x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> vertical_offset <code>number</code> Default <code>0</code>. <p>No return value.</p> <p>Note</p> <p>If you want to apply a single colour to all of the text, simply supply a <code>number</code>.</p> <p>If supplying a <code>string</code>, it must be a stringified array. See Styling Ranges Of Text.</p> <p>See utils.CreateTextLayout for an example.</p>"},{"location":"api/interfaces/IJSGraphics/#writetextsimpletext-font-colour-x-y-w-h-text_alignment-paragraph_alignment-word_wrapping-trimming_granularity","title":"<code>WriteTextSimple(text, font, colour, x, y, w, h[, text_alignment, paragraph_alignment, word_wrapping, trimming_granularity])</code>","text":"Arguments text <code>string</code> <code>$rgb</code> and <code>$font</code> code will be ignored. font <code>string</code> See fonts. colour <code>number</code> x <code>number</code> y <code>number</code> w <code>number</code> h <code>number</code> text_alignment DWRITE_TEXT_ALIGNMENT Default <code>0</code>. paragraph_alignment DWRITE_PARAGRAPH_ALIGNMENT Default <code>0</code>. word_wrapping DWRITE_WORD_WRAPPING Default <code>0</code>. trimming_granularity DWRITE_TRIMMING_GRANULARITY Default <code>0</code>. <p>No return value.</p>"},{"location":"api/interfaces/IJSImage/","title":"IJSImage","text":"<p>Properties</p> Height <code>number</code> read Path <code>string</code> read This will the source path of the image when created from the various album art methods or utils.LoadImage. It will be empty if the image is cloned or created with utils.CreateImage. Width <code>number</code> read <p>Methods</p>"},{"location":"api/interfaces/IJSImage/#clone","title":"<code>Clone()</code>","text":"<p>Returns an <code>IJSImage</code> instance.</p>"},{"location":"api/interfaces/IJSImage/#createbitmap","title":"<code>CreateBitmap()</code>","text":"<p>Return an IJSBitmap instance. You may consider using <code>Dispose()</code> immediately after using this to free up memory.</p> <p>Example</p> <pre><code>var g_bitmap = null;\n\nfunction update_bitmap() {\n    if (g_bitmap) {\n        g_bitmap.Dispose();\n        g_bitmap = null;\n    }\n\n    var handle = fb.GetNowPlaying();\n\n    if (handle) {\n        var image = handle.GetAlbumArt(0); // 0 = front\n        if (image) {\n            g_bitmap = image.CreateBitmap();\n            image.Dispose();\n        }\n    }\n}\n</code></pre> <p>See also: utils.LoadBitmap.</p>"},{"location":"api/interfaces/IJSImage/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IJSImage/#fliprotateoptions","title":"<code>FlipRotate(options)</code>","text":"Arguments options WICBitmapTransform <p>No return value.</p>"},{"location":"api/interfaces/IJSImage/#getcolourschemecount","title":"<code>GetColourScheme(count)</code>","text":"Arguments count <code>number</code> <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>Example</p> <pre><code>// Tracks playlist selection\n\nvar img = null;\nvar arr = [];\non_item_focus_change();\n\nfunction on_item_focus_change() {\n    if (img) {\n        img.Dispose();\n        img = null;\n    }\n\n    arr = [];\n    var metadb = fb.GetFocusItem();\n    if (metadb) {\n        img = metadb.GetAlbumArt();\n\n        if (img) {\n            arr = img.GetColourScheme(10).toArray();\n        }\n    }\n    window.Repaint();\n}\n\nfunction on_paint(gr) {\n    if (img &amp;&amp; arr.length) {\n        gr.DrawImage(img, 0, 0, 300, 300, 0, 0, img.Width, img.Height);\n        for (var i = 0; i &lt; arr.length; i++) {\n            gr.FillRectangle(300, i * 30, window.Width - 300, 30, arr[i]);\n        }\n    }\n}\n\nfunction on_playlist_switch() {\n    on_item_focus_change();\n}\n</code></pre>"},{"location":"api/interfaces/IJSImage/#getgraphics","title":"<code>GetGraphics()</code>","text":"<p>Return an IJSGraphics instance.</p>"},{"location":"api/interfaces/IJSImage/#releasegraphics","title":"<code>ReleaseGraphics()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IJSImage/#resizewidth-height","title":"<code>Resize(width, height)</code>","text":"Arguments width <code>number</code> height <code>number</code> <p>No return value.</p>"},{"location":"api/interfaces/IJSImage/#saveaspath","title":"<code>SaveAs(path)</code>","text":"Arguments path <code>string</code> The parent folder must already exist. The image is saved as <code>JPG</code> so you should use that as the file extension. <p>Returns a <code>boolean</code> value to indicate success.</p>"},{"location":"api/interfaces/IJSImage/#stackblurradius","title":"<code>StackBlur(radius)</code>","text":"Arguments radius <code>number</code> Valid values <code>2</code>-<code>254</code>. <p>No return value.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @name \"StackBlur (image)\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar img = utils.LoadImage(fb.ComponentPath + 'samples\\\\images\\\\1.webp');\nvar blur_img = null;\nvar radius = 20;\n\nStackBlur(radius);\n\nfunction StackBlur(radius) {\n    if (blur_img) blur_img.Dispose();\n    blur_img = img.Clone();\n    blur_img.StackBlur(radius);\n}\n\nfunction on_paint(gr) {\n    gr.DrawImage(img, 0, 0, 550, 368, 0, 0, 550, 368);\n    gr.DrawImage(blur_img, 0, 368, 550, 368, 0, 0, 550, 368);\n    gr.FillRectangle(0, 0, window.Width, 24, RGB(0, 0, 0));\n    gr.WriteText('Scroll mouse to change radius: ' + radius, '', RGB(255, 255, 255), 0, 0, window.Width, 24, 2, 0);\n}\n\nfunction on_mouse_wheel(step) {\n    radius += step * 5;\n    if (radius &lt; 2)\n        radius = 2;\n    if (radius &gt; 254)\n        radius = 254;\n    StackBlur(radius);\n    window.Repaint();\n}\n</code></pre>"},{"location":"api/interfaces/IMainMenuManager/","title":"IMainMenuManager","text":""},{"location":"api/interfaces/IMainMenuManager/#buildmenuparentmenu-base_id","title":"<code>BuildMenu(parentMenu, base_id)</code>","text":"Arguments parentMenu IMenuObj base_id <code>number</code> <p>No return value.</p>"},{"location":"api/interfaces/IMainMenuManager/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMainMenuManager/#executebyidid","title":"<code>ExecuteByID(id)</code>","text":"Arguments id <code>number</code> <p>Returns a <code>boolean</code> value.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\n// Click anywhere in the panel to open the menu.\n\nfunction on_mouse_lbtn_up(x, y) {\n    var menu = window.CreatePopupMenu();\n    var file_popup = window.CreatePopupMenu();\n    var edit_popup = window.CreatePopupMenu();\n    var view_popup = window.CreatePopupMenu();\n    var playback_popup = window.CreatePopupMenu();\n    var library_popup = window.CreatePopupMenu();\n    var help_popup = window.CreatePopupMenu();\n\n    var file = fb.CreateMainMenuManager('File');\n    var edit = fb.CreateMainMenuManager('Edit');\n    var view = fb.CreateMainMenuManager('View');\n    var playback = fb.CreateMainMenuManager('Playback');\n    var library = fb.CreateMainMenuManager('Library');\n    var help = fb.CreateMainMenuManager('Help');\n\n    file.BuildMenu(file_popup, 1000);\n    edit.BuildMenu(edit_popup, 2000);\n    view.BuildMenu(view_popup, 3000);\n    playback.BuildMenu(playback_popup, 4000);\n    library.BuildMenu(library_popup, 5000);\n    help.BuildMenu(help_popup, 6000);\n\n    file_popup.AppendTo(menu, MF_STRING, 'File');\n    edit_popup.AppendTo(menu, MF_STRING, 'Edit');\n    view_popup.AppendTo(menu, MF_STRING, 'View');\n    playback_popup.AppendTo(menu, MF_STRING, 'Playback');\n    library_popup.AppendTo(menu, MF_STRING, 'Library');\n    help_popup.AppendTo(menu, MF_STRING, 'Help');\n\n    var idx = menu.TrackPopupMenu(x, y);\n    menu.Dispose();\n\n    switch (true) {\n    case idx == 0:\n        break;\n    case idx &lt; 2000:\n        file.ExecuteByID(idx - 1000);\n        break;\n    case idx &lt; 3000:\n        edit.ExecuteByID(idx - 2000);\n        break;\n    case idx &lt; 4000:\n        view.ExecuteByID(idx - 3000);\n        break;\n    case idx &lt; 5000:\n        playback.ExecuteByID(idx - 4000);\n        break;\n    case idx &lt; 6000:\n        library.ExecuteByID(idx - 5000);\n        break;\n    case idx &lt; 7000:\n        help.ExecuteByID(idx - 6000);\n        break;\n    }\n\n    file.Dispose();\n    edit.Dispose();\n    view.Dispose();\n    playback.Dispose();\n    library.Dispose();\n    help.Dispose();\n}\n</code></pre>"},{"location":"api/interfaces/IMenuObj/","title":"IMenuObj","text":"<p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\n// Click anywhere to open menu and change background colour.\n\nvar colours = [\n    RGB(255, 0, 0),\n    RGB(0, 255, 0),\n    RGB(0, 0, 255)\n];\n\nvar colour_index = 0;\n\nfunction on_mouse_lbtn_down(x, y) {\n    var menu = window.CreatePopupMenu();\n\n    // start at 1, not 0\n    menu.AppendMenuItem(MF_STRING, 1, 'Red');\n    menu.AppendMenuItem(MF_STRING, 2, 'Green');\n    menu.AppendMenuItem(MF_STRING, 3, 'Blue');\n\n    // mark current selection\n    menu.CheckMenuRadioItem(1, 3, colour_index + 1);\n\n    var idx = menu.TrackPopupMenu(x, y);\n    menu.Dispose();\n\n    switch (idx) {\n        case 0:\n            // user dismissed menu by clicking elsewhere. that's why you can't use 0 when building menu items\n            break;\n        case 1:\n        case 2:\n        case 3:\n            colour_index = idx - 1;\n            window.Repaint();\n            break;\n    }\n}\n\nfunction on_paint(gr) {\n    gr.Clear(colours[colour_index]);\n}\n</code></pre> <p>Methods</p>"},{"location":"api/interfaces/IMenuObj/#appendmenuitemflags-item_id-text","title":"<code>AppendMenuItem(flags, item_id, text)</code>","text":"Arguments flags AppendMenuItem Flags item_id <code>number</code> Must not be zero. Each id must be unique. text <code>string</code> <p>No return value.</p>"},{"location":"api/interfaces/IMenuObj/#appendmenuseparator","title":"<code>AppendMenuSeparator()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMenuObj/#appendtoparentmenu-flags-text","title":"<code>AppendTo(parentMenu, flags, text)</code>","text":"Arguments parentMenu IMenuObj flags AppendMenuItem Flags text <code>string</code> <p>No return value.</p>"},{"location":"api/interfaces/IMenuObj/#checkmenuitemitem_id-check","title":"<code>CheckMenuItem(item_id, check)</code>","text":"Arguments item_id <code>number</code> check <code>boolean</code> <p>No return value.</p>"},{"location":"api/interfaces/IMenuObj/#checkmenuradioitemfirst_item_id-last_item_id-selected_item_id","title":"<code>CheckMenuRadioItem(first_item_id, last_item_id, selected_item_id)</code>","text":"Arguments first_item_id <code>number</code> last_item_id <code>number</code> selected_item_id <code>number</code> <p>No return value.</p>"},{"location":"api/interfaces/IMenuObj/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMenuObj/#setdefaultitem_id","title":"<code>SetDefault(item_id)</code>","text":"Arguments item_id <code>number</code> <p>Setting a menu item as default enables a bold font. You'd typically use it for a default action such as a <code>Play</code> command for a selected playlist item which you could also trigger by pressing the Enter key.</p> <p>Note</p> <p>You can only set a single item as the default. Any further attempt on the same menu object will result in a script error.</p>"},{"location":"api/interfaces/IMenuObj/#trackpopupmenux-y-flags","title":"<code>TrackPopupMenu(x, y[, flags])</code>","text":"Arguments x <code>number</code> y <code>number</code> flags TrackPopupMenu Flags Default <code>0</code>. <p>Returns a <code>number</code>.</p>"},{"location":"api/interfaces/IMetadbHandle/","title":"IMetadbHandle","text":"<p>This will be used in the examples below:</p> <pre><code>var handle = fb.GetFocusItem();\n</code></pre> <p>Note</p> <p>In real world code, you should alaways check the return values from methods like fb.GetFocusItem and playback.GetNowPlaying are not <code>null</code>.</p> <p>Properties</p> FileCreated <code>number</code> read The number of seconds since 00:00:00 Thursday, 1 January 1970 UTC. FileSize <code>number</code> read LastModified <code>number</code> read The number of seconds since 00:00:00 Thursday, 1 January 1970 UTC. Length <code>number</code> read Path <code>string</code> read RawPath <code>string</code> read SubSong <code>number</code> read <p>Example</p> <pre><code>console.log(handle.Path); // D:\\SomeSong.flac\nconsole.log(handle.RawPath); // file://D:\\SomeSong.flac\nconsole.log(handle.FileCreated); // 1659753717\nconsole.log(utils.TimestampToDateString(handle.FileCreated)); // 2022-08-06 03:41:57\n</code></pre> <p>Methods</p>"},{"location":"api/interfaces/IMetadbHandle/#comparehandle","title":"<code>Compare(handle)</code>","text":"Arguments handle IMetadbHandle <p>Returns a <code>boolean</code> value.</p> <p>Example</p> <pre><code>if (handle.Compare(handle2)) {\n    // do something\n}\n</code></pre>"},{"location":"api/interfaces/IMetadbHandle/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandle/#getalbumartart_id-want_stub","title":"<code>GetAlbumArt([art_id, want_stub])</code>","text":"Arguments art_id AlbumArtId Default <code>0</code>. want_stub <code>boolean</code> Default <code>true</code>. <p>Returns an IJSImage instance or <code>null</code> on failure.</p> <p>Note</p> <p>This method can return album art from certain radio streams if the requested type is <code>Front</code>. Use on_stream_album_art_change to get notified of stream artwork changes.</p> <p>Example</p> <pre><code>var image = handle.GetAlbumArt();\nif (image != null) {\n    // The path is now a property of the image.\n    console.log(image.Path);\n}\n</code></pre>"},{"location":"api/interfaces/IMetadbHandle/#getalbumartasyncwindow_id-art_id","title":"<code>GetAlbumArtAsync(window_id[, art_id])</code>","text":"Arguments window_id window.ID art_id AlbumArtId Default <code>0</code>. <p>Use in conjunction with on_get_album_art_done.</p> <p>Note</p> <p>This method does not retrieve stub images. See fb.GetAlbumArtStub.</p>"},{"location":"api/interfaces/IMetadbHandle/#getalbumartembeddedart_id","title":"<code>GetAlbumArtEmbedded([art_id])</code>","text":"Arguments art_id AlbumArtId Default <code>0</code>. <p>Returns an IJSimage instance or <code>null</code> on failure.</p>"},{"location":"api/interfaces/IMetadbHandle/#getalbumartthumbasyncwindow_id-art_id-max_size","title":"<code>GetAlbumArtThumbAsync(window_id[, art_id, max_size])</code>","text":"Arguments window_id window.ID art_id AlbumArtId Default <code>0</code>. max_size <code>number</code> Default <code>300</code>. The minimum allowed value is <code>50</code>. If the original image is smaller than the specified size, it will remain untouched. <p>Use in conjunction with on_get_album_art_done.</p> <p>Note</p> <p>This method does not retrieve stub images. See fb.GetAlbumArtStub.</p>"},{"location":"api/interfaces/IMetadbHandle/#getfileinfo","title":"<code>GetFileInfo()</code>","text":"<p>Returns an IFileInfo instance.</p>"},{"location":"api/interfaces/IMetadbHandle/#isinlibrary","title":"<code>IsInLibrary()</code>","text":"<p>Returns a <code>boolean</code> value.</p>"},{"location":"api/interfaces/IMetadbHandle/#showalbumartviewerart_id-want_stub","title":"<code>ShowAlbumArtViewer([art_id, want_stub])</code>","text":"Arguments art_id AlbumArtId Default <code>0</code>. want_stub <code>boolean</code> Default <code>true</code>. <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandle/#showalbumartviewer2art_id-type","title":"<code>ShowAlbumArtViewer2(art_id, type)</code>","text":"Arguments art_id AlbumArtId type AlbumArtType <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/","title":"IMetadbHandleList","text":"<p>This will be used in the examples below:</p> <pre><code>var handle_list = plman.GetPlaylistItems(plman.ActivePlaylist);\n</code></pre> <p>You can create an empty handle list with fb.CreateHandleList. <pre><code>var handle_list = fb.CreateHandleList();\n</code></pre></p> <p>If you need to create a handle list from a single handle, you can do this... <pre><code>var handle = fb.GetFocusItem();\nif (handle) {\n    var handle_list = fb.CreateHandleList(handle);\n}\n</code></pre></p> <p>Properties</p> Count <code>number</code> read <p>Methods</p>"},{"location":"api/interfaces/IMetadbHandleList/#additemhandle","title":"<code>AddItem(handle)</code>","text":"Arguments handle IMetadbHandle <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#additemshandle_list","title":"<code>AddItems(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#attachimageimage_path-art_id","title":"<code>AttachImage(image_path[, art_id])</code>","text":"Arguments image_path <code>string</code> art_id AlbumArtId Default <code>0</code>. <p>No return value.</p> <p>Any errors such as invalid path, corrupt image, target file type not supporting embedded art, etc should all silently fail. Any existing artwork with the specified <code>art_id</code> will be overwritten. There is no need to remove it first.</p> <p>Example</p> <pre><code>var handle_list = plman.GetPlaylistItems(plman.ActivePlaylist);\nif (handle_list.Count &gt; 0) {\n    var image_path = \"C:\\\\path\\\\to\\\\image.jpg\";\n    handle_list.AttachImage(image_path, 0);\n}\nhandle_list.Dispose();\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#attachimage2image-art_id-format","title":"<code>AttachImage2(image[, art_id, format])</code>","text":"Arguments image IJSImage art_id AlbumArtId Default <code>0</code>. format <code>number</code> Default <code>0</code> is <code>JPG</code>. Use <code>1</code> for <code>WebP</code>. <p>No return value.</p> <p>Any existing artwork with the specified <code>art_id</code> will be overwritten. There is no need to remove it first.</p>"},{"location":"api/interfaces/IMetadbHandleList/#calctotalduration","title":"<code>CalcTotalDuration()</code>","text":"<p>Returns total in seconds.</p>"},{"location":"api/interfaces/IMetadbHandleList/#calctotalsize","title":"<code>CalcTotalSize()</code>","text":"<p>Returns total in bytes.</p>"},{"location":"api/interfaces/IMetadbHandleList/#clone","title":"<code>Clone()</code>","text":"<p>Returns an IMetadbHandleList instance.</p> <p>Example</p> <pre><code>var handle_list2 = handle_list.Clone();\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#copytoclipboard","title":"<code>CopyToClipboard()</code>","text":"<p>Returns a <code>boolean</code> value.</p> <p>Example</p> Copy playlist itemsCut playlist items <pre><code>var handle_list = plman.GetPlaylistSelectedItems(plman.ActivePlaylist);\nhandle_list.CopyToClipboard();\nhandle_list.Dispose();\n</code></pre> <pre><code>// To \"cut\" playlist items, we need to check there are\n// no locks in place preventing removal.\n\nvar PlaylistLockFilterMask = {\n    filter_add : 1,\n    filter_remove : 2,\n    filter_reorder : 4,\n    filter_replace : 8,\n    filter_rename : 16,\n    filter_remove_playlist : 32,\n};\n\nvar ap = plman.ActivePlaylist;\nvar mask = plman.GetPlaylistLockFilterMask(ap);\n\nif (!(mask &amp; PlaylistLockFilterMask.filter_remove)) {\n    var handle_list = plman.GetPlaylistSelectedItems(ap);\n    if (handle_list.CopyToClipboard()) {\n        plman.UndoBackup(ap);\n        plman.RemovePlaylistSelection(ap);\n    }\n    handle_list.Dispose();\n}\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#dodragdropeffect","title":"<code>DoDragDrop(effect)</code>","text":"Arguments effect <code>number</code> <p>Returns a <code>number</code>.</p>"},{"location":"api/interfaces/IMetadbHandleList/#dropcount","title":"<code>Drop(count)</code>","text":"Arguments count <code>number</code> <p>Returns an IMetadbHandleList instance.</p> <p>It will be a copy of the original handle list with <code>count</code> handles removed from the beginning. If the supplied <code>count</code> exceeds the handle list count, an empty handle list will be returned.</p>"},{"location":"api/interfaces/IMetadbHandleList/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#findhandle","title":"<code>Find(handle)</code>","text":"Arguments handle IMetadbHandle <p>Returns position of handle or <code>-1</code> on failure.</p>"},{"location":"api/interfaces/IMetadbHandleList/#getitemindex","title":"<code>GetItem(index)</code>","text":"Arguments index <code>number</code> <p>Returns an IMetadbHandle instance.</p> <p>Example</p> <pre><code>var handle = handle_list.GetItem(0);\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#getlibraryrelativepaths","title":"<code>GetLibraryRelativePaths()</code>","text":"<p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>This is useful for creating an <code>Album List</code> like script in <code>folder structure</code> mode where you'd like the monitored music folder removed from the path of each handle list item.</p> <p>Example</p> <p>If the foobar2000 Media Library is configured to watch <code>D:\\Music\\</code> and the path of the first item in the handle list is</p> <p><code>D:\\Music\\Albums\\Artist\\Some Album\\Some Song.flac</code></p> <p>then...</p> <pre><code>var handle_list = fb.GetLibraryItems();\nhandle_list.SortByRelativePath();\nvar relative_paths = handle_list.GetLibraryRelativePaths().toArray();\nconsole.log(relative_paths[0]);\n// Albums\\Artist\\Some Album\\Some Song.flac\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#getotherinfo","title":"<code>GetOtherInfo()</code>","text":"<p>This returns a <code>JSON</code> object in string form so you need to use <code>JSON.parse</code> on the result. It provides all the information viewable on the <code>Details</code> tab in the main <code>Properties</code> dialog. This can be technical/location info as well as database fields from 3rd party components if present.</p> <p>Example</p> <pre><code>var handle_list = plman.GetPlaylistItems(plman.ActivePlaylist);\nvar str = handle_list.GetOtherInfo();\nconsole.log(str);\n</code></pre> Example output<pre><code>{\n    \"General\": {\n        \"Avg. bitrate\": \"259 kbps\",\n        \"Channels\": \"2\",\n        \"Codec\": \"MP3 (82.5%); AAC (17.5%)\",\n        \"Codec profile\": \"MP3 VBR V0 (39.1%); MP3 CBR (24.3%); AAC LC (17.5%); MP3 VBR V2 (11.7%); MP3 VBR (3.9%); MP3 ABR (3.5%)\",\n        \"Duration\": \"5:24:44.445 (859 264 046 samples)\",\n        \"Encoding\": \"lossy\",\n        \"Sample rate\": \"44100 Hz\",\n        \"Tag type\": \"id3v2.4 (82.5%)\",\n        \"Tool\": \"LAME3.97 (27.6%); LAME3.99r (13.7%); LAME3.90 (7.4%); LAME3.98r (5.5%); LAME3.99 (5.4%); Lavf (4.7%); LAME3.97b (3.8%); LAME3.98b (3.5%); LAME3.96r (1.2%); LAME3.100 (1.1%)\"\n    },\n    \"Location\": {\n        \"File names\": \"Bat For Lashes - Clouds.mp3, Bat For Lashes - Daphne.m4a, Bat For Lashes - Lumen.m4a, Bat For Lashes - Plan The Escape.mp3 ...\",\n        \"Folder name\": \"E:\\\\Music\\\\Tracks\",\n        \"Last modified\": \"2021-12-01 00:00:00\",\n        \"Total size\": \"601 MB (631 125 587 bytes)\"\n    }\n}\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#getqueryitemsquery","title":"<code>GetQueryItems(query)</code>","text":"Arguments query <code>string</code> <p>Returns an IMetadbHandleList instance.</p> <p>Note</p> <p>Errors will be thrown on invalid queries so if you're not using predefined safe queries and are accepting user input, you should use this inside a try/catch statement. An empty handle list will be returned if the query is valid but there are no results.</p>"},{"location":"api/interfaces/IMetadbHandleList/#groupbytagtag","title":"<code>GroupByTag(tag)</code>","text":"Arguments tag <code>string</code> <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>The allows library viewers to cater for multiple value tags.</p> <p>Example</p> <pre><code>var items = fb.GetLibraryItems();\nvar arr = items.GroupByTag('artist').toArray();\n\n// note the +=2 here\n// even elements are the tag value\n// odd number elements are the handles for that tag value\nfor (var i = 0; i &lt; arr.length; i += 2) {\n    var artist = arr[i];\n\n    // the order of these will be random. You must sort them yourself.\n    var artist_handles = arr[i + 1];\n}\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#insertitemindex-handle","title":"<code>InsertItem(index, handle)</code>","text":"Arguments index <code>number</code> handle IMetadbHandle <p>No return value.</p> <p>Example</p> <pre><code>var handle = ...\nhandle_list.InsertItem(0, handle);\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#insertitemsindex-handle_list","title":"<code>InsertItems(index, handle_list)</code>","text":"Arguments index <code>number</code> handle_list IMetadbHandleList <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#makedifferencehandle_list","title":"<code>MakeDifference(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList <p>No return value.</p> <p>Example</p> <pre><code>var one = plman.GetPlaylistItems(0);\nvar two = plman.GetPlaylistItems(1);\none.MakeDifference(two);\n</code></pre> <p><code>one</code> now only contains handles that were unique to <code>one</code>. Anything that also existed in <code>two</code> will have been removed. The order of items in <code>one</code> will be randomised. <code>two</code> should be untouched.</p>"},{"location":"api/interfaces/IMetadbHandleList/#makeintersectionhandle_list","title":"<code>MakeIntersection(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList <p>No return value.</p> <p>Example</p> <pre><code>var one = plman.GetPlaylistItems(0);\nvar two = plman.GetPlaylistItems(1);\none.MakeIntersection(two);\n</code></pre> <p><code>one</code> now only contains handles that were in BOTH <code>one</code> AND <code>two</code>. The order of items in <code>one</code> will be randomised. <code>two</code> should be untouched.</p>"},{"location":"api/interfaces/IMetadbHandleList/#optimisefilelayoutminimise","title":"<code>OptimiseFileLayout([minimise])</code>","text":"Arguments minimise <code>boolean</code> Default <code>false</code>. <p>No return value.</p> <p>With <code>minimise</code> set to <code>false</code>, provides the functionality of <code>Utilities&gt;Optimize file layout</code> or if <code>minimise</code> is <code>true</code> then <code>Utilities&gt;Optimize file layout + minimize file size</code>. Unlike the context menu versions, there is no prompt.</p>"},{"location":"api/interfaces/IMetadbHandleList/#randomise","title":"<code>Randomise()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#removeall","title":"<code>RemoveAll()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#removeattachedimageart_id","title":"<code>RemoveAttachedImage([art_id])</code>","text":"Arguments art_id AlbumArtId Default <code>0</code>. <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#removeattachedimages","title":"<code>RemoveAttachedImages()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#removebyidxidx","title":"<code>RemoveByIdx(idx)</code>","text":"Arguments idx <code>number</code> <p>No return value.</p> <p>Example</p> <pre><code>handle_list.RemoveByIdx(0);\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#removeduplicates","title":"<code>RemoveDuplicates()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#removeduplicatesbyformatpattern","title":"<code>RemoveDuplicatesByFormat(pattern)</code>","text":"Arguments pattern <code>string</code> <p>No return value.</p> <p>Example</p> <pre><code>// This ensures the handle list will\n// contain no more than 1 track by the same artist.\nvar handle_list = fb.GetLibraryItems();\nhandle_list.Randomise();\nhandle_list.RemoveDuplicatesByFormat(\"%artist%\");\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#removefromidxfrom-num","title":"<code>RemoveFromIdx(from, num)</code>","text":"Arguments from <code>number</code> num <code>number</code> <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#replaceitemindex-handle","title":"<code>ReplaceItem(index, handle)</code>","text":"Arguments index <code>number</code> handle IMetadbHandle <p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#reverse","title":"<code>Reverse()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#runcontextcommandcommand","title":"<code>RunContextCommand(command)</code>","text":"Arguments command <code>string</code> The full path to the command must be supplied. Case is not important. <p>Returns <code>true</code> if a matching command was found, <code>false</code> otherwise.</p> <p>Example</p> <pre><code>var handle_list = plman.GetPlaylistSelectedItems(plman.ActivePlaylist);\nhandle_list.RunContextCommand(\"Properties\");\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#saveaspath","title":"<code>SaveAs(path)</code>","text":"Arguments path <code>string</code> <p>No return value.</p> <p>Saves using native foobar2000 <code>.fpl</code> format so you should use that as the file extension. The parent folder must already exist.</p> <p>Example</p> <pre><code>var handle_list = plman.GetPlaylistItems(plman.ActivePlaylist);\nhandle_list.SaveAs(\"z:\\\\blah.fpl\");\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#sortbyformatpattern-direction","title":"<code>SortByFormat(pattern, direction)</code>","text":"Arguments pattern <code>string</code> direction <code>number</code> Ascending while &gt; <code>0</code>. <p>No return value.</p> <p>Example</p> <pre><code>var handle_list = fb.GetLibraryItems();\nvar pattern = \"%album artist%|%date%|%album%|%discnumber%|%tracknumber%\";\nhandle_list.SortByFormat(pattern, 1);\n</code></pre>"},{"location":"api/interfaces/IMetadbHandleList/#sortbypath","title":"<code>SortByPath()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/IMetadbHandleList/#sortbyrelativepath","title":"<code>SortByRelativePath()</code>","text":"<p>No return value.</p> <p>Note</p> <p>This method should only be used on a handle list containing items that are monitored as part of the <code>Media Library</code>.</p>"},{"location":"api/interfaces/IMetadbHandleList/#takecount","title":"<code>Take(count)</code>","text":"Arguments count <code>number</code> <p>Returns an IMetadbHandleList instance.</p> <p>It will contain the first <code>count</code> handles from the original handle list. If the <code>count</code> exceeds the handle list count, a copy will be returned.</p>"},{"location":"api/interfaces/IMetadbHandleList/#updatefileinfofromjsonstr","title":"<code>UpdateFileInfoFromJSON(str)</code>","text":"Arguments str <code>string</code> <p>This method is for writing tags to files. The behaviour of whatever tag names you supply match the standard <code>Properties</code> dialog.</p> <p>You must supply a stringifed <code>array</code> or <code>object</code> as per these examples:</p> <p>Example</p> ArrayObject <p>This example uses an <code>array</code> and its length must match the <code>handle list</code> count. A fail safe way of doing this is looping through the <code>handle list</code> and filling the array as you go.</p> <pre><code>// assume we've selected one album\nvar handle_list = plman.GetPlaylistSelectedItems(plman.ActivePlaylist);\n\n// an empty array\nvar arr = [];\n\nfor (var i = 0; i &lt; handle_list.Count; i++) {\n    // Each element of the array must be an object\n    // of key names/values, indicated by the curly braces.\n    arr.push({\n        \"tracknumber\" : i + 1,\n        \"totaltracks\" : handle_list.Count,\n        \"album\" : \"Greatest Hits\", // a simple string for a single value\n        \"genre\" : [\"Rock\", \"Hard Rock\"] // use an array for multi-value tags\n    });\n}\n\nvar str = JSON.stringify(arr);\n\nhandle_list.UpdateFileInfoFromJSON(str);\nhandle_list.Dispose();\n</code></pre> <p>If you want to write the exact same tags to each and every track in the <code>handle list</code>, you can use an <code>object</code> instead.</p> <pre><code>var handle_list = plman.GetPlaylistSelectedItems(plman.ActivePlaylist);\n\nvar obj = {\n    \"album\" : \"Greatest Hits\",\n    \"genre\" : [\"Rock\", \"Hard Rock\"]\n};\n\nvar str = JSON.stringify(obj);\nhandle_list.UpdateFileInfoFromJSON(str);\nhandle_list.Dispose();\n</code></pre> <p>You can use blank values to clear any existing tags.</p> <p>Example</p> <pre><code>var obj = {\n    \"album\" : \"\"\n};\n</code></pre> <p>Do not try using any method of using empty objects or blank tag names to avoid tagging any files. You should filter your <code>handle list</code> first to make sure it only contains files you really want to update.</p>"},{"location":"api/interfaces/IPlayingItemLocation/","title":"IPlayingItemLocation","text":"<p>Properties</p> IsValid <code>boolean</code> read PlaylistIndex <code>number</code> read PlaylistItemIndex <code>number</code> read <p><code>IsValid</code> will always be <code>false</code> if foobar2000 isn't playing. It can also be <code>false</code> if the playing track has since been removed from the playlist it was on when playback was started.</p> <p>Example</p> <pre><code>var playing_item_location = plman.GetPlayingItemLocation();\nif (playing_item_location.IsValid) {\n    console.log(playing_item_location.PlaylistIndex);\n    console.log(playing_item_location.PlaylistItemIndex);\n}\n</code></pre>"},{"location":"api/interfaces/ITextLayout/","title":"ITextLayout","text":"<p>See utils.CreateTextLayout.</p> <p>Methods</p>"},{"location":"api/interfaces/ITextLayout/#calctextheightmax_width","title":"<code>CalcTextHeight(max_width)</code>","text":"Arguments max_width <code>number</code> <p>Returns a <code>number</code>.</p>"},{"location":"api/interfaces/ITextLayout/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/ITitleFormat/","title":"ITitleFormat","text":"<p>This will be used in the examples below:</p> <pre><code>var tfo = fb.TitleFormat(\"%artist%\");\n</code></pre> <p>Methods</p>"},{"location":"api/interfaces/ITitleFormat/#dispose","title":"<code>Dispose()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/ITitleFormat/#eval","title":"<code>Eval()</code>","text":"<p>Returns a <code>string</code>. It will be empty if foobar2000 is not playing.</p>"},{"location":"api/interfaces/ITitleFormat/#evalplaylistitemplaylistindex-playlistitemindex","title":"<code>EvalPlaylistItem(playlistIndex, playlistItemIndex)</code>","text":"Arguments playlistIndex <code>number</code> playlistItemIndex <code>number</code> <p>Returns a <code>string</code>.</p> <p>Use if you want access to playlist specific fields such as <code>%list_index%</code>, <code>%list_total%</code>, <code>%isplaying%</code> etc. Full details here.</p>"},{"location":"api/interfaces/ITitleFormat/#evalwithmetadbhandle","title":"<code>EvalWithMetadb(handle)</code>","text":"Arguments handle IMetadbHandle <p>Returns a <code>string</code>.</p> <p>Example</p> <pre><code>var item = fb.GetFocusItem();\n\nif (item) {\n    var artist = tfo.EvalWithMetadb(item);\n}\n</code></pre> <p>Note</p> <p>You should try and avoid using this method inside a loop. It's preferable to use the <code>EvalWithMetadbs</code> method just below.</p>"},{"location":"api/interfaces/ITitleFormat/#evalwithmetadbshandle_list","title":"<code>EvalWithMetadbs(handle_list)</code>","text":"Arguments handle_list IMetadbHandleList <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>Example</p> <pre><code>var handle_list = fb.GetLibraryItems();\nvar artists = tfo.EvalWithMetadbs(handle_list).toArray();\nconsole.log(handle_list.Count === artists.length); // True\n</code></pre>"},{"location":"api/interfaces/ITooltip/","title":"ITooltip","text":"<p>This will be used in the examples below: <pre><code>var tooltip = window.CreateTooltip();\n</code></pre></p> <p>Properties</p> Text <code>string</code> read, write TrackActivate <code>boolean</code> write <p>Example</p> <pre><code>tooltip.Text = \"Whoop\";\n</code></pre> <p>Methods</p>"},{"location":"api/interfaces/ITooltip/#activate","title":"<code>Activate()</code>","text":"<p>No return value.</p> <p>Note</p> <p>Only call this when text has changed otherwise it will flicker.</p> <p>Example</p> <pre><code>var text = \"...\";\nif (tooltip.Text != text) {\n    tooltip.Text = text;\n    tooltip.Activate();\n}\n</code></pre>"},{"location":"api/interfaces/ITooltip/#deactivate","title":"<code>Deactivate()</code>","text":"<p>No return value.</p>"},{"location":"api/interfaces/ITooltip/#setmaxwidthwidth","title":"<code>SetMaxWidth(width)</code>","text":"Arguments width <code>number</code> <p>No return value.</p> <p>Use if you want multi-line tooltips.</p> <p>Example</p> <pre><code>tooltip.SetMaxWidth(800);\n\n// Use \\n as a new line separator.\ntooltip.Text = \"Line1\\nLine2\";\n</code></pre>"},{"location":"api/interfaces/ITooltip/#trackpositionx-y","title":"<code>TrackPosition(x, y)</code>","text":"Arguments x <code>number</code> y <code>number</code> <p>No return value.</p> <p>Note</p> <p>Check x, y positions have changed from last time otherwise it will flicker. If making the tooltip text relative to the mouse position, you must add offsets so there is no danger of it being behind the mouse pointer.</p> <p>Example</p> <pre><code>var g_tooltip = window.CreateTooltip();\nvar g_trackingMouse = false;\nvar g_oldX, g_oldY;\n\nfunction on_mouse_move(x, y) {\n    if (!g_trackingMouse) {\n        g_tooltip.Activate();\n        g_tooltip.TrackActivate = true;\n        g_trackingMouse = true;\n    }\n\n    // Make sure the position is changed\n    if (g_oldX != x || g_oldY != y) {\n        g_tooltip.Text = \"x:\" + x + \", y:\" + y;\n\n        // add offsets here\n        g_tooltip.TrackPosition(x + 20, y + 20);\n        g_oldX = x;\n        g_oldY = y;\n    }\n}\n\nfunction on_mouse_leave() {\n    g_trackingMouse = false;\n    g_tooltip.TrackActivate = false;\n}\n</code></pre>"},{"location":"api/namespaces/console/","title":"console","text":"<p>Methods</p>"},{"location":"api/namespaces/console/#consolegetlineswith_timestamp","title":"<code>console.GetLines([with_timestamp])</code>","text":"Arguments with_timestamp <code>boolean</code> Default <code>false</code>. <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>Use in conjunction with on_console_refresh.</p>"},{"location":"api/namespaces/console/#consoleclearbacklog","title":"<code>console.ClearBacklog()</code>","text":"<p>No return value.</p>"},{"location":"api/namespaces/console/#consolelogmessage","title":"<code>console.log(message)</code>","text":"Arguments message <code>string</code>, <code>number</code>, <code>boolean</code>, <code>array</code>, <code>object</code> <p>No return value.</p> <p>Example</p> <pre><code>console.log(\"blah\"); // blah\n\nconsole.log(2 &lt; 3); // True\nconsole.log(2 &gt; 3); // False\n\nconsole.log(1,2,3); // 1 2 3\nconsole.log([1,2,3]); // 1,2,3\n\nvar obj = {a:1};\nconsole.log(obj); // [object Object]\nconsole.log(JSON.stringify(obj)); // {\"a\":1}\n\n// multiple args are split by single spaces\nconsole.log(\"put\", \"a\", \"donk\", \"on\", \"it\"); // put a donk on it\nconsole.log(\"a\", 2, 3.5); // a 2 3.5\n</code></pre>"},{"location":"api/namespaces/fb/","title":"fb","text":"<p>Properties</p> fb.AlwaysOnTop <code>boolean</code> read, write fb.ComponentPath <code>string</code> read fb.FoobarPath <code>string</code> read fb.ProfilePath <code>string</code> read fb.VersionString <code>string</code> read <p>Example</p> <pre><code>fb.AlwaysOnTop = !fb.AlwaysOnTop; // toggles the current value\nconsole.log(fb.FoobarPath); // Z:\\foobar2000\\\n</code></pre> <p>Methods</p>"},{"location":"api/namespaces/fb/#fbadddirectory","title":"<code>fb.AddDirectory()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbaddfiles","title":"<code>fb.AddFiles()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbaddlocationsasyncwindow_id-paths","title":"<code>fb.AddLocationsAsync(window_id, paths)</code>","text":"Arguments window_id window.ID paths <code>array</code> An array of strings which could be files, urls, playlists. <p>Returns a unique <code>task_id</code>.</p> <p>Similar to plman.AddLocations except rather than specifiying a target playlist, you get a handle list generated from the supplied paths/urls which are sent to a new on_locations_added callback.</p> <p>Example</p> <pre><code>var files = [\"z:\\\\1.mp3\", \"z:\\\\2.flac\"];\n\nfunction on_mouse_lbtn_dblclk() {\n    var task_id = fb.AddLocationsAsync(window.ID, files);\n    console.log(\"got task_id\", task_id);\n}\n\nfunction on_locations_added(task_id, handle_list) {\n    console.log(\"callback task_id\", task_id);\n    console.log(handle_list.Count);\n}\n</code></pre>"},{"location":"api/namespaces/fb/#fbcheckclipboardcontents","title":"<code>fb.CheckClipboardContents()</code>","text":"<p>Returns a <code>boolean</code> value.</p> <p>Checks clipboard contents are handles or a file selection from <code>Windows Explorer</code>. Use in conjunction with fb.GetClipboardContents.</p>"},{"location":"api/namespaces/fb/#fbcheckcomponentname","title":"<code>fb.CheckComponent(name)</code>","text":"Arguments name <code>string</code> <p>Returns a <code>boolean</code> value.</p> <p>Use this if your script depends on other components.</p> <p>Example</p> <pre><code>if (!fb.CheckComponent(\"foo_playcount\")) {\n    utils.ShowPopupMessage(\"This script requires foo_playcount.\", \"Rating\");\n}\n</code></pre>"},{"location":"api/namespaces/fb/#fbclearplaylist","title":"<code>fb.ClearPlaylist()</code>","text":"<p>No return value.</p> <p>Clears active playlist. If you wish to clear a specific playlist, use plman.ClearPlaylist.</p>"},{"location":"api/namespaces/fb/#fbcreatecontextmenumanager","title":"<code>fb.CreateContextMenuManager()</code>","text":"<p>Returns an IContextMenuManager instance.</p>"},{"location":"api/namespaces/fb/#fbcreatehandlelisthandle","title":"<code>fb.CreateHandleList([handle])</code>","text":"Arguments handle IMetadbHandle, optional <p>Returns an IMetadbHandleList instance.</p> <p>Example</p> <pre><code>var handle = fb.GetFocusItem();\nvar handle_list = fb.CreateHandleList(handle);\nvar image_path = ...\nhandle_list.AttachImage(image_path, 0);\nhandle_list.Dispose();\n</code></pre>"},{"location":"api/namespaces/fb/#fbcreatemainmenumanagerroot_name","title":"<code>fb.CreateMainMenuManager(root_name)</code>","text":"Arguments root_name <code>string</code> Must be one of <code>File</code>, <code>Edit</code>, <code>View</code>, <code>Playback</code>, <code>Library</code>, <code>Help</code>. <p>Returns an IMainMenuManager instance.</p>"},{"location":"api/namespaces/fb/#fbenableadvancedlogging","title":"<code>fb.EnableAdvancedLogging()</code>","text":"<p>No return value.</p> <p>Only enable this if you're having problems diagnosing your own script errors. The setting persists until <code>foobar2000</code> is closed. To disable this advanced logging, remove this method and restart <code>foobar2000</code>.</p> <p>Console messages will point directly at the <code>C++</code> source code and this is something that you can ask about in the main support thread.</p>"},{"location":"api/namespaces/fb/#fbenumeratemainmenucommands","title":"<code>fb.EnumerateMainMenuCommands()</code>","text":"<p>Returns a <code>JSON</code> array in string form so you need to use <code>JSON.parse</code> on the result.</p> <p>Every item of the array has the following properties: <pre><code>Checked // boolean\nDisabled // boolean\nFullPath // string, the same full path you'd supply to fb.RunMainMenuCommand\nHiddenByDefault // boolean\nRadio // boolean\nType // string \"Fixed\" or \"Dynamic\"\nVisible // boolean\n</code></pre></p> <p>Example</p> <pre><code>var menu_commands = JSON.parse(fb.EnumerateMainMenuCommands());\n\n// list all checked commands in the Console\nmenu_commands.filter(function (command) {\n    return command.Checked;\n}).forEach(function (command) {\n    console.log(command.FullPath);\n});\n</code></pre>"},{"location":"api/namespaces/fb/#fbexit","title":"<code>fb.Exit()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbgetalbumartstubart_id","title":"<code>fb.GetAlbumArtStub([art_id])</code>","text":"Arguments art_id AlbumArtId Default <code>0</code>. <p>Returns an IJSImage instance or <code>null</code> on failure.</p>"},{"location":"api/namespaces/fb/#fbgetaudiochunkrequested_length-offset","title":"<code>fb.GetAudioChunk(requested_length[, offset])</code>","text":"Arguments requested_length <code>number</code> seconds offset <code>number</code> Default <code>0</code> <p>Returns an IAudioChunk instance or <code>null</code> on failure.</p> <p><code>get_absolute_time</code> and <code>get_chunk_absolute</code> and their arguments are described here:</p> <p>https://github.com/marc2k3/foobar2000-sdk/blob/main/foobar2000/SDK/vis.h</p>"},{"location":"api/namespaces/fb/#fbgetclipboardcontents","title":"<code>fb.GetClipboardContents()</code>","text":"<p>Returns an IMetadbHandleList instance.</p> <p>Clipboard contents can be handles copied to the clipboard in other components, a file selection from Explorer, etc.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nfunction on_mouse_rbtn_up(x, y) {\n    var ap = plman.ActivePlaylist;\n\n    // playlist_can_add_items is defined in helpers.txt, it uses\n    // plman.GetPlaylistLockFilterMask to determine if the active playlist\n    // permits adding items\n    // MF_STRING and MF_GRAYED are also defined there.\n\n    var can_paste_flag = playlist_can_add_items(ap) &amp;&amp; fb.CheckClipboardContents() ? MF_STRING : MF_GRAYED;\n\n    var menu = window.CreatePopupMenu();\n    menu.AppendMenuItem(can_paste_flag, 1, \"Paste\");\n\n    var idx = menu.TrackPopupMenu(x, y);\n    menu.Dispose();\n\n    if (idx == 1) {\n        var handle_list = fb.GetClipboardContents();\n        plman.InsertPlaylistItems(ap, plman.GetPlaylistItemCount(ap), handle_list);\n        handle_list.Dispose();\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"api/namespaces/fb/#fbgetfocusitem","title":"<code>fb.GetFocusItem()</code>","text":"<p>Returns an IMetadbHandle instance.</p> <p>Handle of the currently selected active playlist item or <code>null</code> on failure.</p>"},{"location":"api/namespaces/fb/#fbgetlibraryitemsquery","title":"<code>fb.GetLibraryItems([query])</code>","text":"Arguments query <code>string</code> Optional. If omitted or invalid, all items will be returned. <p>Returns an IMetadbHandleList instance.</p>"},{"location":"api/namespaces/fb/#fbgetselectionflags","title":"<code>fb.GetSelection([flags])</code>","text":"Arguments flags <code>number</code> Default <code>0</code>, <code>1</code> no now playing <p>Returns an IMetadbHandleList instance.</p>"},{"location":"api/namespaces/fb/#fbgetselectiontype","title":"<code>fb.GetSelectionType()</code>","text":"<p>Returns a SelectionType</p>"},{"location":"api/namespaces/fb/#fbislibraryenabled","title":"<code>fb.IsLibraryEnabled()</code>","text":"<p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/fb/#fbislibraryinitialised","title":"<code>fb.IsLibraryInitialised()</code>","text":"<p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/fb/#fbloadplaylist","title":"<code>fb.LoadPlaylist()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbruncontextcommandcommand","title":"<code>fb.RunContextCommand(command)</code>","text":"Arguments command <code>string</code> The full path to the command must be supplied. Case is not important. <p>Returns <code>true</code> if a matching command was found, <code>false</code> otherwise.</p> <p>Note</p> <p>This method is for the currently playing file only. See also: IMetadbHandleList RunContextCommand.</p>"},{"location":"api/namespaces/fb/#fbrunmainmenucommandcommand","title":"<code>fb.RunMainMenuCommand(command)</code>","text":"Arguments command <code>string</code> The full path to the command must be supplied. Case is not important. <p>Returns <code>true</code> if a matching command was found, <code>false</code> otherwise.</p>"},{"location":"api/namespaces/fb/#fbsaveplaylist","title":"<code>fb.SavePlaylist()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbshowconsole","title":"<code>fb.ShowConsole()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbshowlibrarysearchuiquery","title":"<code>fb.ShowLibrarySearchUI(query)</code>","text":"Arguments query <code>string</code> <p>No return value.</p> <p>Opens the <code>Library&gt;Search</code> window populated with the query you set.</p>"},{"location":"api/namespaces/fb/#fbshowpictureviewerpath","title":"<code>fb.ShowPictureViewer(path)</code>","text":"Arguments path <code>string</code> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbshowpreferences","title":"<code>fb.ShowPreferences()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/fb/#fbtitleformatpattern","title":"<code>fb.TitleFormat(pattern)</code>","text":"Arguments pattern <code>string</code> <p>Returns an ITitleFormat instance.</p>"},{"location":"api/namespaces/playback/","title":"playback","text":"<p>Properties</p> playback.CursorFollowPlayback <code>boolean</code> read, write playback.CustomVolume <code>number</code> read See note below. playback.IsPaused <code>boolean</code> read playback.IsPlaying <code>boolean</code> read playback.Length <code>number</code> read playback.Order PlaybackOrder read,write playback.PlaybackFollowCursor <code>boolean</code> read, write playback.ReplaygainMode ReplaygainMode read, write playback.StopAfterCurrent <code>boolean</code> read, write playback.Time <code>number</code> read, write playback.Volume <code>number</code> read, write See note below. <p>Custom Volume</p> <p><code>playback.CustomVolume</code> can be used for displaying the volume from <code>UPnP</code> devices. It will return a value of <code>-1</code> when using a normal device and that also indicates that <code>playback.Volume</code> is writable. When a custom volume control is active, you can not use <code>playback.Volume</code> and must use <code>playback.VolumeUp()</code> / <code>playback.VolumeDown()</code> / <code>playback.VolumeMute()</code>.</p> <p>Methods</p>"},{"location":"api/namespaces/playback/#playbackgetactivedsps","title":"<code>playback.GetActiveDSPs()</code>","text":"<p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p>"},{"location":"api/namespaces/playback/#playbackgetdsppresets","title":"<code>playback.GetDSPPresets()</code>","text":"<p>Returns a <code>JSON</code> array in string form so you need to use <code>JSON.parse</code> on the result.</p> <p>Example</p> <pre><code>var str = playback.GetDSPPresets();\nconsole.log(str);\n</code></pre> Example output<pre><code>[\n    {\n        \"Active\": true,\n        \"Name\": \"two\"\n    },\n    {\n        \"Active\": false,\n        \"Name\": \"three\"\n    }\n]\n</code></pre> <pre><code>var arr = JSON.parse(str);\nconsole.log(arr.length); // number of presets\n\nfor (var i = 0; i &lt; arr.length; i++) {\n    if (arr[i].Active) {\n        // this is the active preset, do something with the Name??\n    }\n}\n</code></pre>"},{"location":"api/namespaces/playback/#playbackgetnowplaying","title":"<code>playback.GetNowPlaying()</code>","text":"<p>Returns an IMetadbHandle instance. Now playing item or <code>null</code> if foobar2000 isn't playing.</p>"},{"location":"api/namespaces/playback/#playbackgetordernames","title":"<code>playback.GetOrderNames()</code>","text":"<p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>This is an array of playback order names which can be iterated or used with <code>playback.Order</code>.</p> <p>Example</p> CurrentLoop <pre><code>console.log(playback.GetOrderNames().toArray()[playback.Order]);\n</code></pre> <pre><code>var arr = playback.GetOrderNames().toArray();\nfor (var i = 0; i &lt; arr.length; i++) {\n    console.log(arr[i]);\n}\n</code></pre>"},{"location":"api/namespaces/playback/#playbackgetoutputdevices","title":"<code>playback.GetOutputDevices()</code>","text":"<p>Returns a <code>JSON</code> array in string form so you need to use <code>JSON.parse</code> on the result.</p> <p>Example</p> <pre><code>var str = playback.GetOutputDevices();\nconsole.log(str);\n</code></pre> Example output<pre><code>[\n    {\n        \"Active\": false,\n        \"DeviceID\": \"{5243F9AD-C84F-4723-8194-0788FC021BCC}\",\n        \"Name\": \"Null Output\",\n        \"OutputID\": \"{EEEB07DE-C2C8-44C2-985C-C85856D96DA1}\"\n    },\n    {\n        \"Active\": true,\n        \"DeviceID\": \"{00000000-0000-0000-0000-000000000000}\",\n        \"Name\": \"Primary Sound Driver\",\n        \"OutputID\": \"{D41D2423-FBB0-4635-B233-7054F79814AB}\"\n    },\n    {\n        \"Active\": false,\n        \"DeviceID\": \"{1C4EC038-97DB-48E7-9C9A-05FDED46847B}\",\n        \"Name\": \"Speakers (Sound Blaster Z)\",\n        \"OutputID\": \"{D41D2423-FBB0-4635-B233-7054F79814AB}\"\n    },\n    {\n        \"Active\": false,\n        \"DeviceID\": \"{41B86272-3D6C-4A5A-8907-4FE7EBE39E7E}\",\n        \"Name\": \"SPDIF-Out (Sound Blaster Z)\",\n        \"OutputID\": \"{D41D2423-FBB0-4635-B233-7054F79814AB}\"\n    },\n    {\n        \"Active\": false,\n        \"DeviceID\": \"{9CDC0FAE-2870-4AFA-8287-E86099D69076}\",\n        \"Name\": \"3 - BenQ BL3200 (AMD High Definition Audio Device)\",\n        \"OutputID\": \"{D41D2423-FBB0-4635-B233-7054F79814AB}\"\n    }\n]\n</code></pre> <pre><code>var arr = JSON.parse(str);\nconsole.log(arr.length); // number of devices\n</code></pre> <p>As you can see, only one of the items in the array has <code>Active</code> set to <code>true</code> so that is the device you'd want to display the name of or mark as selected in a menu.</p> <p>To change device you can use fb.RunMainMenuCommand with the device name or use playback.SetOutputDevice with the <code>DeviceID</code>/<code>OutputID</code>.</p> <p>Example</p> RunMainMenuCommandSetOutputDevice <pre><code>var str = playback.GetOutputDevices();\nvar arr = JSON.parse(str);\n// Assuming same list from above, switch output to the last device.\nfb.RunMainMenuCommand(\"Playback/Device/\" + arr[4].Name);\n</code></pre> <pre><code>var str = playback.GetOutputDevices();\nvar arr = JSON.parse(str);\n// Assuming same list from above, switch output to the last device.\nplayback.SetOutputDevice(arr[4].OutputID, arr[4].DeviceID);\n</code></pre>"},{"location":"api/namespaces/playback/#playbacknext","title":"<code>playback.Next()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackpause","title":"<code>playback.Pause()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackplay","title":"<code>playback.Play()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackplayorpause","title":"<code>playback.PlayOrPause()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackprevious","title":"<code>playback.Previous()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackrandom","title":"<code>playback.Random()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbacksetdsppresetidx","title":"<code>playback.SetDSPPreset(idx)</code>","text":"Arguments idx <code>number</code> <p>No return value. See playback.GetDSPPresets.</p>"},{"location":"api/namespaces/playback/#playbacksetoutputdeviceoutputid-deviceid","title":"<code>playback.SetOutputDevice(OutputID, DeviceID)</code>","text":"Arguments OutputID <code>string</code> DeviceID <code>string</code> <p>No return value. See playback.GetOutputDevices.</p>"},{"location":"api/namespaces/playback/#playbackstop","title":"<code>playback.Stop()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackvolumedown","title":"<code>playback.VolumeDown()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackvolumemute","title":"<code>playback.VolumeMute()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/playback/#playbackvolumeup","title":"<code>playback.VolumeUp()</code>","text":"<p>Shortcut to main menu command.</p> <p>No return value.</p>"},{"location":"api/namespaces/plman/","title":"plman","text":"<p>Properties</p> plman.ActivePlaylist <code>number</code> read, write Could be <code>-1</code> if reading value and no playlist is active. plman.PlayingPlaylist <code>number</code> read Could be <code>-1</code> if not playing or playing item doesn't belong to any playlist. plman.PlaylistCount <code>number</code> read plman.RecyclerCount <code>number</code> read <p>Methods</p> <p>Note</p> <p>Most methods require that the <code>playlistIndex</code> argument is valid. That means not <code>-1</code> and less than <code>plman.PlaylistCount</code>.</p>"},{"location":"api/namespaces/plman/#plmanaddlocationsplaylistindex-paths-select","title":"<code>plman.AddLocations(playlistIndex, paths[, select])</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. Also, it must not be an autoplaylist or have a lock in place preventing the addition of new files. paths <code>array</code> Can be file paths/urls/playlists. select <code>boolean</code> Default <code>false</code>. If <code>true</code>, the active playlist will be set to the <code>playlistIndex</code>, the items will be selected and focus will be set to the first new item. <p>No return value.</p> <p>Note</p> <p>This operation is asynchronous and may take some time to complete if it's a large array.</p> <p>Example</p> <pre><code>var arr = [\"e:\\\\1.mp3\"];\nplman.AddLocations(plman.ActivePlaylist, arr);\n</code></pre>"},{"location":"api/namespaces/plman/#plmanaddplaylistlockplaylistindex-mask","title":"<code>plman.AddPlaylistLock(playlistIndex, mask)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. mask PlaylistLockFilterMask <p>Returns <code>true</code> on success, <code>false</code> if playlist already locked.</p> <p>See plman.ShowPlaylistLockUI first as that provides a dialog and is much more user friendly!</p> <p>Note</p> <p>Before you can add a playlist lock, you must check there is no lock present already. If another component owns the lock, you have to use that component to remove it. If the lock is owned by <code>JScript Panel</code> then you must remove it first. This is because locks cannot be edited. You have to remove it and then add a new one with a new mask value.</p> <p>Example</p> <pre><code>function add_playlist_lock(playlistIndex, mask) {\n    // check if playlistIndex is valid\n    if (playlistIndex &gt;= 0 &amp;&amp; playlistIndex &lt; plman.PlaylistCount) {\n        if (plman.IsPlaylistLocked(playlistIndex)) {\n            if (plman.GetPlaylistLockName(playlistIndex) == 'JScript Panel') {\n                // We own this lock so we can remove it.\n                plman.RemovePlaylistLock(playlistIndex);\n            } else {\n                // Locked but not ours. Nothing we can do.\n                return false;\n            }\n        }\n\n        return plman.AddPlaylistLock(playlistIndex, mask);\n    }\n    return false;\n}\n\n// Available mask values\nvar PlaylistLockFilterMask = {\n    filter_add : 1,\n    filter_remove : 2,\n    filter_reorder : 4,\n    filter_replace : 8,\n    filter_rename : 16,\n    filter_remove_playlist : 32,\n};\n\n// Setting a single value:\nvar mask = PlaylistLockFilterMask.filter_add;\n\n// To set multiple values at once, use | like this:\nvar mask2 = PlaylistLockFilterMask.filter_add | PlaylistLockFilterMask.filter_remove;\n\n// You may add a value to an existing mask using a bitwise operator like this:\nmask |= PlaylistLockFilterMask.filter_replace;\n\n//To remove a value, use &amp;= and ~ like this:\nmask &amp;= ~PlaylistLockFilterMask.filter_replace;\n</code></pre>"},{"location":"api/namespaces/plman/#plmanclearplaylistplaylistindex","title":"<code>plman.ClearPlaylist(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanclearplaylistselectionplaylistindex","title":"<code>plman.ClearPlaylistSelection(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmancreateautoplaylistplaylistindex-name-query-sort-flags","title":"<code>plman.CreateAutoPlaylist(playlistIndex, name, query[, sort, flags])</code>","text":"Arguments playlistIndex <code>number</code> name <code>string</code> query <code>string</code> flags <code>number</code> Default <code>0</code>. Use <code>1</code> to force sort. <p>Returns the index of the newly created <code>Autoplaylist</code> or <code>-1</code> on failure. The most likely cause of that would be an invalid query.</p>"},{"location":"api/namespaces/plman/#plmancreateplaylistplaylistindex-name","title":"<code>plman.CreatePlaylist([playlistIndex, name])</code>","text":"Arguments playlistIndex <code>number</code> Optional name <code>string</code> Optional <p>Returns the index of the newly created playlist.</p> <p>Example</p> <pre><code>/*\nCreates a new playlist last in the list and it\nwill be named `New playlist` or have numbers appended if\nthere are existing playlists with the same name. Using\nthe return value, you can switch to it.\n*/\n\nvar new_index = plman.CreatePlaylist();\nplman.ActivePlaylist = new_index;\n</code></pre>"},{"location":"api/namespaces/plman/#plmanduplicateplaylistplaylistindex-name","title":"<code>plman.DuplicatePlaylist(playlistIndex, name)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. name <code>string</code> If you supply an empty string, the name of the original playlist is used. <p>Returns the index of the newly created playlist which will be directly after the original. Only the content is duplicated, not the properties.</p>"},{"location":"api/namespaces/plman/#plmanexecuteplaylistdefaultactionplaylistindex-playlistitemindex","title":"<code>plman.ExecutePlaylistDefaultAction(playlistIndex, playlistItemIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. playlistItemIndex <code>number</code> Must be valid. <p>No return value.</p> <p>Starts playback by executing the default doubleclick action unless overridden by a lock to do something else.</p>"},{"location":"api/namespaces/plman/#plmanfindbyguidstr","title":"<code>plman.FindByGUID(str)</code>","text":"Arguments str <code>string</code> <p>Returns the index or <code>-1</code> on failure. Only strings returned by <code>plman.GetGUID</code> would be valid.</p>"},{"location":"api/namespaces/plman/#plmanfindorcreateplaylistname-unlocked","title":"<code>plman.FindOrCreatePlaylist(name, unlocked)</code>","text":"Arguments name <code>string</code> unlocked <code>boolean</code> If <code>true</code>, locked playlists are ignored when looking for existing playlists. <p>Returns index of named playlist or newly created playlist.</p>"},{"location":"api/namespaces/plman/#plmanfindplaylistname","title":"<code>plman.FindPlaylist(name)</code>","text":"Arguments name <code>string</code> Not case senstive. <p>Returns the found index or <code>-1</code> on failure.</p>"},{"location":"api/namespaces/plman/#plmangetguidplaylistindex","title":"<code>plman.GetGUID(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>Returns a <code>string</code> which is a unique persistent property of the playlist.</p>"},{"location":"api/namespaces/plman/#plmangetplayingitemlocation","title":"<code>plman.GetPlayingItemLocation()</code>","text":"<p>Returns an IPlayingItemLocation instance.</p>"},{"location":"api/namespaces/plman/#plmangetplaylistfocusitemindexplaylistindex","title":"<code>plman.GetPlaylistFocusItemIndex(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns index or <code>-1</code> if nothing is selected.</p>"},{"location":"api/namespaces/plman/#plmangetplaylistitemcountplaylistindex","title":"<code>plman.GetPlaylistItemCount(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns a <code>number</code>.</p>"},{"location":"api/namespaces/plman/#plmangetplaylistitemsplaylistindex","title":"<code>plman.GetPlaylistItems(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns an IMetadbHandleList instance.</p>"},{"location":"api/namespaces/plman/#plmangetplaylistlockfiltermaskplaylistindex","title":"<code>plman.GetPlaylistLockFilterMask(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns a PlaylistLockFilterMask or <code>-1</code> if supplied with an invalid <code>playlistIndex</code>.</p> <p>Use this to determine the type(s) of locks applied to the specified playlist.</p> <p>Example</p> <pre><code>var PlaylistLockFilterMask = {\n    filter_add : 1,\n    filter_remove : 2,\n    filter_reorder : 4,\n    filter_replace : 8,\n    filter_rename : 16,\n    filter_remove_playlist : 32,\n};\n\nvar mask = plman.GetPlaylistLockFilterMask(plman.ActivePlaylist)\nif (mask &amp; PlaylistLockFilterMask.filter_add) {\n    console.log(\"Can't add files to this playlist\");\n}\n</code></pre> <p>For convenience, these methods are included in <code>helpers.txt</code>.</p> <pre><code>function playlist_can_add_items(playlistIndex) {\n    return !(plman.GetPlaylistLockFilterMask(playlistIndex) &amp; PlaylistLockFilterMask.filter_add);\n}\n\nfunction playlist_can_remove_items(playlistIndex) {\n    return !(plman.GetPlaylistLockFilterMask(playlistIndex) &amp; PlaylistLockFilterMask.filter_remove);\n}\n\nfunction playlist_can_reorder(playlistIndex) {\n    return !(plman.GetPlaylistLockFilterMask(playlistIndex) &amp; PlaylistLockFilterMask.filter_reorder);\n}\n\nfunction playlist_can_replace_items(playlistIndex) {\n    return !(plman.GetPlaylistLockFilterMask(playlistIndex) &amp; PlaylistLockFilterMask.filter_replace);\n}\n\nfunction playlist_can_rename(playlistIndex) {\n    return !(plman.GetPlaylistLockFilterMask(playlistIndex) &amp; PlaylistLockFilterMask.filter_rename);\n}\n\nfunction playlist_can_remove(playlistIndex) {\n    return !(plman.GetPlaylistLockFilterMask(playlistIndex) &amp; PlaylistLockFilterMask.filter_remove_playlist);\n}\n</code></pre>"},{"location":"api/namespaces/plman/#plmangetplaylistlocknameplaylistindex","title":"<code>plman.GetPlaylistLockName(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns the name of the component that implemented the playlist lock or an empty string if the playlist is not locked.</p>"},{"location":"api/namespaces/plman/#plmangetplaylistnameplaylistindex","title":"<code>plman.GetPlaylistName(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns a <code>string</code>.</p>"},{"location":"api/namespaces/plman/#plmangetplaylistselecteditemsplaylistindex","title":"<code>plman.GetPlaylistSelectedItems(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns an IMetadbHandleList instance.</p>"},{"location":"api/namespaces/plman/#plmangetqueryitemsplaylistindex-query","title":"<code>plman.GetQueryItems(playlistIndex, query)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. query <code>string</code> <p>Returns an IMetadbHandleList instance.</p> <p>Note</p> <p>Errors will be thrown on invalid queries so if you're not using predefined safe queries and are accepting user input, you should use this inside a try/catch statement. An empty handle list will be returned if the query is valid but there are no results.</p>"},{"location":"api/namespaces/plman/#plmangetrecycleritemsindex","title":"<code>plman.GetRecyclerItems(index)</code>","text":"Arguments index <code>number</code> Must be valid. <p>Returns an IMetadbHandleList instance.</p> <p>Example</p> <pre><code>var count = plman.RecyclerCount;\nif (count &gt; 0) {\n    // retrieve handles from first deleted playlist\n    var handle_list = plman.GetRecyclerItems(0);\n}\n</code></pre>"},{"location":"api/namespaces/plman/#plmangetrecyclernameindex","title":"<code>plman.GetRecyclerName(index)</code>","text":"Arguments index <code>number</code> Must be valid. <p>Example</p> <pre><code>var count = plman.RecyclerCount;\nif (count &gt; 0) {\n    // output name of first deleted playlist\n    console.log(plman.GetRecyclerName(0));\n}\n</code></pre>"},{"location":"api/namespaces/plman/#plmaninsertplaylistitemsplaylistindex-base-handle_list-select","title":"<code>plman.InsertPlaylistItems(playlistIndex, base, handle_list[, select])</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. base <code>number</code> Position in playlist. handle_list IMetadbHandleList select <code>boolean</code> Default <code>false</code>. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmaninsertplaylistitemsfilterplaylistindex-base-handle_list-select","title":"<code>plman.InsertPlaylistItemsFilter(playlistIndex, base, handle_list[, select])</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. base <code>number</code> Position in playlist. handle_list IMetadbHandleList select <code>boolean</code> Default <code>false</code>. <p>No return value.</p> <p>Same as above except any duplicates contained in <code>handle_list</code> are removed.</p>"},{"location":"api/namespaces/plman/#plmaninvertselectionplaylistindex","title":"<code>plman.InvertSelection(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanisautoplaylistplaylistindex","title":"<code>plman.IsAutoPlaylist(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/plman/#plmanisplaylistitemselectedplaylistindex-playlistitemindex","title":"<code>plman.IsPlaylistItemSelected(playlistIndex, playlistItemIndex)</code>","text":"Arguments playlistIndex <code>number</code> playlistItemIndex <code>number</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/plman/#plmanisplaylistlockedplaylistindex","title":"<code>plman.IsPlaylistLocked(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> <p>Returns a <code>boolean</code> value.</p> <p>Note</p> <p>It's advisable to use plman.GetPlaylistLockFilterMask as this will let you determine what kind of locks are in place. For example, if a playlist only has a lock preventing you from deleting it, you can still add/remove files which you wouldn't be able determine from using <code>plman.IsPlaylistLocked</code> alone.</p>"},{"location":"api/namespaces/plman/#plmanmoveplaylistfrom-to","title":"<code>plman.MovePlaylist(from, to)</code>","text":"Arguments from <code>number</code> Must be valid. to <code>number</code> Must be valid and not equal to <code>from</code>. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanmoveplaylistselectionplaylistindex-new_pos","title":"<code>plman.MovePlaylistSelection(playlistIndex, new_pos)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. new_pos <code>number</code> <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanrecyclerpurgeaffecteditems","title":"<code>plman.RecyclerPurge(affectedItems)</code>","text":"Arguments affectedItems <code>array</code> <p>No return value.</p> <p>Purges deleted playlists so they cannot be restored.</p> <p>Example</p> <pre><code>// first only\nplman.RecyclerPurge([0]);\n\n// first and third only\nplman.RecyclerPurge([0,2]);\n\n// purges all deleted playlists\nvar arr = [];\nvar count = plman.RecyclerCount;\nfor (var i = 0; i &lt; count; i++) {\n    arr.push(i);\n}\nplman.RecyclerPurge(arr);\n</code></pre>"},{"location":"api/namespaces/plman/#plmanrecyclerrestoreindex","title":"<code>plman.RecyclerRestore(index)</code>","text":"Arguments index <code>number</code> Must be valid. <p>No return value.</p> <p>Example</p> <pre><code>var count = plman.RecyclerCount;\nif (count &gt; 0) {\n    // restore first deleted playlist\n    plman.RecyclerRestore(0);\n}\n</code></pre>"},{"location":"api/namespaces/plman/#plmanremoveplaylistplaylistindex","title":"<code>plman.RemovePlaylist(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p> <p>Note</p> <p>If removing the active playlist, no playlist will be active after using this. You'll need to set it manually or use plman.RemovePlaylistSwitch instead.</p>"},{"location":"api/namespaces/plman/#plmanremoveplaylistlockplaylistindex","title":"<code>plman.RemovePlaylistLock(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>Returns a <code>boolean</code> value.</p> <p>Note</p> <p>You can only remove a playlist lock if it's owned by <code>JScript Panel</code>. You can check this with plman.GetPlaylistLockName. See plman.AddPlaylistLock for an example.</p>"},{"location":"api/namespaces/plman/#plmanremoveplaylistsplaylistindexes","title":"<code>plman.RemovePlaylists(playlistIndexes)</code>","text":"Arguments playlistIndexes <code>array</code> <p>No return value.</p> <p>Example</p> <pre><code>// This would remove all empty playlists.\nvar arr = [];\nfor (var i = 0; i &lt; plman.PlaylistCount; i++) {\n    if (plman.GetPlaylistItemCount(i) == 0) arr.push(i);\n}\nif (arr.length) plman.RemovePlaylists(arr);\n</code></pre>"},{"location":"api/namespaces/plman/#plmanremoveplaylistselectionplaylistindex-crop","title":"<code>plman.RemovePlaylistSelection(playlistIndex[, crop])</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. crop <code>boolean</code> Default <code>false</code>. <p>No return value.</p> <p>Example</p> <pre><code>// Removes selected items from playlist.\nplman.RemovePlaylistSelection(plman.ActivePlaylist);\n\n// Removes items that are NOT selected.\nplman.RemovePlaylistSelection(plman.ActivePlaylist, true);\n</code></pre>"},{"location":"api/namespaces/plman/#plmanremoveplaylistswitchplaylistindex","title":"<code>plman.RemovePlaylistSwitch(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p> <p>This automatically sets another playlist as active if removing the active playlist.</p>"},{"location":"api/namespaces/plman/#plmanrenameplaylistplaylistindex-name","title":"<code>plman.RenamePlaylist(playlistIndex, name)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. name <code>string</code> <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanreplaceplaylistitemplaylistindex-playlistitemindex-handle","title":"<code>plman.ReplacePlaylistItem(playlistIndex, playlistItemIndex, handle)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. playlistItemIndex <code>number</code> Must be valid. handle IMetadbHandle <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanselectqueryitemsplaylistindex-query","title":"<code>plman.SelectQueryItems(playlistIndex, query)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. query <code>string</code> <p>This selects playlist items in a similar manner to the <code>foobar2000</code> native playlist search.</p> <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p>"},{"location":"api/namespaces/plman/#plmansetactiveplaylistcontext","title":"<code>plman.SetActivePlaylistContext()</code>","text":"<p>No return value.</p> <p>Workaround so you can use the <code>Edit</code> menu when your panel has focus and a dedicated playlist viewer doesn't.</p> <p>Example</p> <pre><code>// Once on startup.\nplman.SetActivePlaylistContext();\n\nfunction on_focus(is_focused) {\n    if (is_focused) {\n        // When the panel gets focus but not on every click.\n        plman.SetActivePlaylistContext();\n    }\n}\n</code></pre>"},{"location":"api/namespaces/plman/#plmansetplaylistfocusitemplaylistindex-playlistitemindex","title":"<code>plman.SetPlaylistFocusItem(playlistIndex, playlistItemIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. playlistItemIndex <code>number</code> Must be valid. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmansetplaylistselectionplaylistindex-affecteditems-state","title":"<code>plman.SetPlaylistSelection(playlistIndex, affectedItems, state)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. affectedItems <code>array</code> state <code>boolean</code> <p>No return value.</p> <p>Example</p> <pre><code>// Selects first, third and fifth tracks in playlist.\n// This does not affect other selected items.\n\nvar arr = [0, 2, 4];\nplman.SetPlaylistSelection(plman.ActivePlaylist, arr, true);\n</code></pre>"},{"location":"api/namespaces/plman/#plmansetplaylistselectionsingleplaylistindex-playlistitemindex-state","title":"<code>plman.SetPlaylistSelectionSingle(playlistIndex, playlistItemIndex, state)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. playlistItemIndex <code>number</code> Must be valid. state <code>boolean</code> <p>No return value.</p> <p>Example</p> <pre><code>// Deselects first playlist item.\n// Only works when it is already selected!\n\nplman.SetPlaylistSelectionSingle(plman.ActivePlaylist, 0, false);\n</code></pre> <p>Example</p> <pre><code>// Selects last item in playlist.\n// This does not affect other selected items.\n\nvar ap = plman.ActivePlaylist;\nvar count = plman.GetPlaylistItemCount(ap);\nplman.SetPlaylistSelectionSingle(ap, count - 1, true);\n</code></pre>"},{"location":"api/namespaces/plman/#plmanshowautoplaylistuiplaylistindex","title":"<code>plman.ShowAutoPlaylistUI(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanshowplaylistlockuiplaylistindex","title":"<code>plman.ShowPlaylistLockUI(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>Shows popup window letting you toggle the various lock options on/off.</p> <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmansortbyformatplaylistindex-pattern-direction","title":"<code>plman.SortByFormat(playlistIndex, pattern[, direction])</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. pattern <code>string</code> Title formatting pattern to sort by. direction <code>number</code> Default <code>1</code>. Use <code>1</code> for ascending, <code>-1</code> for descending. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmansortplaylistsbynamedirection","title":"<code>plman.SortPlaylistsByName([direction])</code>","text":"Arguments direction <code>number</code> Default <code>1</code>. Use <code>1</code> for ascending, <code>-1</code> for descending. <p>No return value.</p>"},{"location":"api/namespaces/plman/#plmanundobackupplaylistindex","title":"<code>plman.UndoBackup(playlistIndex)</code>","text":"Arguments playlistIndex <code>number</code> Must be valid. <p>No return value.</p> <p>Call before using other <code>plman</code> methods that add/remove/reorder playlist items so a history will be available from the <code>Edit</code> menu.</p>"},{"location":"api/namespaces/utils/","title":"utils","text":"<p>Properties</p> utils.VersionString <code>string</code> read <p>Methods</p>"},{"location":"api/namespaces/utils/#utilscalctextwidthtext-font_str","title":"<code>utils.CalcTextWidth(text, font_str)</code>","text":"Arguments text <code>string</code> font_str <code>string</code> See fonts. <p>Returns a <code>number</code>.</p> <p>Example</p> <pre><code>var text = \"blah\";\nvar font = window.GetUIFont(0);\nvar width = utils.CalcTextWidth(text, font);\n</code></pre>"},{"location":"api/namespaces/utils/#utilscheckfontname","title":"<code>utils.CheckFont(name)</code>","text":"Arguments name <code>string</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilscolourpickerdefault_colour","title":"<code>utils.ColourPicker(default_colour)</code>","text":"Arguments default_colour <code>number</code> <p>Returns a <code>number</code> which can used as the <code>colour</code> in many methods.</p>"},{"location":"api/namespaces/utils/#utilsconverttoasciistr","title":"<code>utils.ConvertToAscii(str)</code>","text":"Arguments str <code>string</code> <p>Returns a <code>string</code>.</p>"},{"location":"api/namespaces/utils/#utilscopyfilefrom-to-overwrite","title":"<code>utils.CopyFile(from, to[, overwrite])</code>","text":"Arguments from <code>string</code> to <code>string</code> overwrite <code>boolean</code> Default <code>true</code>. <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilscopyfolderfrom-to-overwrite-recur","title":"<code>utils.CopyFolder(from, to[, overwrite, recur])</code>","text":"Arguments from <code>string</code> to <code>string</code> overwrite <code>boolean</code> Default <code>true</code>. recur <code>boolean</code> Default <code>true</code>. If <code>false</code>, only files at the root of the folder are copied. <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilscreatefolderpath","title":"<code>utils.CreateFolder(path)</code>","text":"<p>Returns <code>true</code> on success or if folder already exists. Returns <code>false</code> if operation fails.</p> <p>Parent folders are created if they don't exist.</p>"},{"location":"api/namespaces/utils/#utilscreateimagewidth-height","title":"<code>utils.CreateImage(width, height)</code>","text":"Arguments width <code>number</code> height <code>number</code> <p>Returns an IJSImage instance.</p>"},{"location":"api/namespaces/utils/#utilscreatetextlayouttext-font_str-text_alignment-paragraph_alignment-word_wrapping-trimming_granularity","title":"<code>utils.CreateTextLayout(text, font_str[, text_alignment, paragraph_alignment, word_wrapping, trimming_granularity])</code>","text":"Arguments text <code>string</code> font_str <code>string</code> See fonts. text_alignment DWRITE_TEXT_ALIGNMENT Default <code>0</code>. paragraph_alignment DWRITE_PARAGRAPH_ALIGNMENT Default <code>0</code>. word_wrapping DWRITE_WORD_WRAPPING Default <code>0</code>. trimming_granularity DWRITE_TRIMMING_GRANULARITY Default <code>0</code>. <p>Returns an ITextLayout instance.</p> <p>You typically use this when you want to calculate the height of a string that wraps over multiple lines or need scrolling. When passing to IJSGraphics WriteTextLayout, you can supply a vertical offset.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @name \"SimpleScroll\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar font = CreateFontString('Segoe UI', 20);\nvar text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\nvar layout = utils.CreateTextLayout(text, font);\nvar offset = 0;\nvar text_height = 0;\n\nvar box = {\n    x : 50,\n    y : 50,\n    w : 0,\n    h : 0,\n}\n\nfunction on_paint(gr) {\n    gr.Clear(RGB(255, 255, 255));\n    gr.DrawRectangle(box.x, box.y, box.w, box.h, 1, RGB(255, 0, 0));\n    gr.WriteTextLayout(layout, RGB(0, 0, 0), box.x, box.y, box.w, box.h, offset);\n}\n\nfunction on_mouse_wheel(step) {\n    if (text_height &lt; box.h)\n        return;\n\n    offset += step * 60;\n\n    if (offset &gt; 0)\n        offset = 0;\n    else if (offset &lt; box.h - text_height)\n        offset = box.h - text_height;\n\n    window.Repaint();\n}\n\nfunction on_size() {\n    box.w = window.Width / 2;\n    box.h = window.Height / 2;\n    text_height = layout.CalcTextHeight(box.w);\n\n    if (text_height &lt; box.h)\n        offset = 0;\n    else if (offset &lt; box.h - text_height)\n        offset = box.h - text_height;\n}\n</code></pre>"},{"location":"api/namespaces/utils/#utilsdatestringtotimestampstr","title":"<code>utils.DateStringToTimestamp(str)</code>","text":"Arguments str <code>string</code> Must be in full <code>YYYY-MM-DD HH:MM:SS</code> format. <p>The return value is seconds since 00:00:00 Thursday, 1 January 1970 UTC.</p> <p>It is expected date strings are timezone adjusted but timestamps are UTC (not adjusted).</p> <p>Example</p> <pre><code>var last_played_string = \"2018-08-30 00:00:00\";\nvar last_played_timestamp = utils.DateStringToTimestamp(last_played_string);\n\nvar now = utils.Now();\n\n// number of seconds in a day\nvar day = 24 * 60 * 60;\n\n// number of days since last played\nconsole.log(Math.floor((now - last_played_timestamp) / day));\n</code></pre>"},{"location":"api/namespaces/utils/#utilsdetectcharsetpath","title":"<code>utils.DetectCharset(path)</code>","text":"Arguments path <code>string</code> Path to a text file. <p>Returns a <code>number</code> which can be supplied to utils.ReadTextFile.</p> <p>This may not be accurate and returns <code>0</code> if an error occurred.</p>"},{"location":"api/namespaces/utils/#utilsdownloadfileasyncwindow_id-url-path-verify_image","title":"<code>utils.DownloadFileAsync(window_id, url, path[, verify_image])</code>","text":"Arguments window_id window.ID url <code>string</code> The remote file you want to download. path <code>string</code> Full path including extension. The parent folder must already exist. verify_image <code>boolean</code> Default <code>false</code>. <p>No return value.</p> <p>Use in conjunction with on_download_file_done.</p> <p>Note</p> <p>You must ensure none of the folders in the <code>path</code> end with a period character.</p>"},{"location":"api/namespaces/utils/#utilsdownloadimageasyncwindow_id-url","title":"<code>utils.DownloadImageAsync(window_id, url)</code>","text":"Arguments window_id window.ID url <code>string</code> The image url you want to download. <p>No return value.</p> <p>Use in conjunction with on_download_image_done.</p> <p>Note</p> <p>This is useful for temporary display of images you consider disposable and don't want to keep. Use <code>utils.DownloadFileAsync</code> if you want a permanent copy.</p> <p>There is a maximum size limit in place. Anything larger than <code>64MB</code> will fail to download.</p>"},{"location":"api/namespaces/utils/#utilsenvstr","title":"<code>utils.Env(str)</code>","text":"Arguments str <code>string</code> <p>Returns a <code>string</code>.</p> <p>Example</p> <pre><code>console.log(utils.Env(\"%windir%\")); // C:\\Windows\n</code></pre>"},{"location":"api/namespaces/utils/#utilsformatdurationseconds","title":"<code>utils.FormatDuration(seconds)</code>","text":"Arguments seconds <code>number</code> <p>Returns a <code>string</code>.</p> <p>Example</p> <pre><code>var playlist_items = plman.GetPlaylistItems(plman.ActivePlaylist);\nvar playlist_length_seconds = playlist_items.CalcTotalDuration();\nconsole.log(utils.FormatDuration(playlist_length_seconds)); // 5:24:44\n</code></pre>"},{"location":"api/namespaces/utils/#utilsformatfilesizebytes","title":"<code>utils.FormatFileSize(bytes)</code>","text":"Arguments bytes <code>number</code> <p>Returns a <code>string</code>.</p> <p>Example</p> <pre><code>var playlist_items = plman.GetPlaylistItems(plman.ActivePlaylist);\nvar playlist_bytes = playlist_items.CalcTotalSize()\nconsole.log(utils.FormatFileSize(playlist_bytes)); // 601 MB\n</code></pre>"},{"location":"api/namespaces/utils/#utilsgetclipboardtext","title":"<code>utils.GetClipboardText()</code>","text":"<p>Returns a <code>string</code>. It will be empty if the clipboard contents are not text.</p>"},{"location":"api/namespaces/utils/#utilsgetcountryflagcountry_or_code","title":"<code>utils.GetCountryFlag(country_or_code)</code>","text":"Arguments country_or_code <code>string</code> <p>Returns a <code>string</code>. Could be empty on failure.</p> <p>See Country Flags.</p>"},{"location":"api/namespaces/utils/#utilsgetfilesizepath","title":"<code>utils.GetFileSize(path)</code>","text":"Arguments path <code>string</code> <p>Returns the size in bytes.</p>"},{"location":"api/namespaces/utils/#utilsgetlastmodifiedpath","title":"<code>utils.GetLastModified(path)</code>","text":"Arguments path <code>string</code> <p>The return value is seconds since 00:00:00 Thursday, 1 January 1970 UTC.</p>"},{"location":"api/namespaces/utils/#utilsgetsyscolourindex","title":"<code>utils.GetSysColour(index)</code>","text":"Arguments index <code>number</code> https://docs.microsoft.com/en-gb/windows/win32/api/winuser/nf-winuser-getsyscolor <p>Returns a <code>number</code> which can used as the <code>colour</code> in many methods. Could be <code>0</code> if the <code>index</code> is invalid.</p> <p>Example</p> <pre><code>var splitter_colour = utils.GetSysColour(15);\n</code></pre>"},{"location":"api/namespaces/utils/#utilsgetsystemmetricsindex","title":"<code>utils.GetSystemMetrics(index)</code>","text":"Arguments index <code>number</code> https://docs.microsoft.com/en-gb/windows/win32/api/winuser/nf-winuser-getsystemmetrics <p>Returns a <code>number</code>.</p>"},{"location":"api/namespaces/utils/#utilsglobpattern-exc_mask-inc_mask","title":"<code>utils.Glob(pattern[, exc_mask, inc_mask])</code>","text":"Arguments pattern <code>string</code> exc_mask FILE_ATTRIBUTE Default <code>FILE_ATTRIBUTE_DIRECTORY</code>. inc_mask FILE_ATTRIBUTE Default <code>0xffffffff</code>. <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p> <p>Example</p> <pre><code>var arr = utils.Glob(\"C:\\\\Pictures\\\\*.jpg\").toArray();\n</code></pre>"},{"location":"api/namespaces/utils/#utilshashstringstr","title":"<code>utils.HashString(str)</code>","text":"Arguments str <code>string</code> <p>Returns a <code>string</code>.</p>"},{"location":"api/namespaces/utils/#utilshttprequestasyncwindow_id-type-url-user_agent_or_headers-body","title":"<code>utils.HTTPRequestAsync(window_id, type, url[, user_agent_or_headers, body])</code>","text":"Arguments window_id window.ID type <code>number</code> Use <code>0</code> for <code>GET</code>, <code>1</code> for <code>POST</code>. url <code>string</code> user_agent_or_headers <code>string</code> Optional. See Web Requests for examples. body <code>string</code> This is ignored for <code>GET</code> requests and can be omitted. It is required for <code>POST</code> requests. It could be form data or a stringified <code>JSON</code> object/array. <p>Note</p> <p>This is for fetching plain text only. See utils.DownloadFileAsync for downloading binary files or utils.DownloadImageAsync for downloading images in memory.</p> <p>Returns a unique <code>task_id</code> which is used as the first argument in the on_http_request_done callback.</p> <p>Note</p> <p>When making a <code>POST</code> request, you should set a <code>Content-Type</code> header. Valid values could be <code>application/json</code> or <code>application/x-www-form-urlencoded</code>.</p> <p>See Web Requests for examples.</p>"},{"location":"api/namespaces/utils/#utilsinputboxprompt-title-default_value-error_on_cancel","title":"<code>utils.InputBox(prompt, title[, default_value, error_on_cancel])</code>","text":"Arguments prompt <code>string</code> title <code>string</code> default_value <code>string</code> Defaults to an empty string if omitted. error_on_cancel <code>boolean</code> Default <code>false</code>. If set to <code>true</code>, you must use try/catch to prevent script errors. <p>Returns a <code>string</code>.</p> <p>With <code>error_on_cancel</code> not set (or set to <code>false</code>), cancelling the dialog will return <code>default_value</code>.</p> <p>Example</p> <pre><code>var username = utils.InputBox(\"Enter your username\", \"JScript Panel\", \"\");\n</code></pre> <p>Using the above example, you can't tell if <code>OK</code> or <code>Cancel</code> was pressed if the return value is the same as <code>default_value</code>.</p> <p>If you need to know, set <code>error_on_cancel</code> to <code>true</code> which throws a script error when <code>Cancel</code> is pressed.</p> <p>Example</p> <pre><code>try {\n    var username = utils.InputBox(\"Enter your name\", \"JScript Panel\", \"\", true);\n    // OK was pressed.\n} catch(e) {\n    // Dialog was closed by pressing Esc, Cancel or the Close button.\n}\n</code></pre>"},{"location":"api/namespaces/utils/#utilsisfilepath","title":"<code>utils.IsFile(path)</code>","text":"Arguments path <code>string</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilsisfolderfolder","title":"<code>utils.IsFolder(folder)</code>","text":"Arguments folder <code>string</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilsiskeypressedvkey","title":"<code>utils.IsKeyPressed(vkey)</code>","text":"Arguments vkey <code>number</code> https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilslistfilesfolder-recursive","title":"<code>utils.ListFiles(folder[, recursive])</code>","text":"Arguments folder <code>string</code> recursive <code>boolean</code> Default <code>false</code>. <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p>"},{"location":"api/namespaces/utils/#utilslistfoldersfolder-recursive","title":"<code>utils.ListFolders(folder[, recursive])</code>","text":"Arguments folder <code>string</code> recursive <code>boolean</code> Default <code>false</code>. <p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p>"},{"location":"api/namespaces/utils/#utilslistfonts","title":"<code>utils.ListFonts()</code>","text":"<p>Returns a <code>VBArray</code> so you need to use <code>.toArray()</code> on the result.</p>"},{"location":"api/namespaces/utils/#utilsloadbitmappath-max_size","title":"<code>utils.LoadBitmap(path[, max_size])</code>","text":"Arguments path <code>string</code> Any valid image supported by the <code>Windows Imaging Component</code>. max_size <code>number</code> Default is <code>0</code> which leaves the original untouched. <p>Returns an IJSBitmap instance or <code>null</code> on failure.</p>"},{"location":"api/namespaces/utils/#utilsloadimagepath-max_size","title":"<code>utils.LoadImage(path[, max_size])</code>","text":"Arguments path <code>string</code> Any valid image supported by the <code>Windows Imaging Component</code>. max_size <code>number</code> Default is <code>0</code> which leaves the original untouched. <p>Returns an IJSImage instance or <code>null</code> on failure.</p>"},{"location":"api/namespaces/utils/#utilsmessageboxprompt-title-flags","title":"<code>utils.MessageBox(prompt, title, flags)</code>","text":"Arguments prompt <code>string</code> title <code>string</code> flags MessageBox Buttons, MessageBox Icons Can be combined. <p>Returns a MessageBox Return Value.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar prompt = \"Do you really want to open the Preferences?\";\nvar title = \"A very important question\";\nif (utils.MessageBox(prompt, title, MB_YESNO | MB_ICONQUESTION) == IDYES) {\n    fb.ShowPreferences();\n}\n</code></pre>"},{"location":"api/namespaces/utils/#utilsnow","title":"<code>utils.Now()</code>","text":"<p>Returns a Unix timestamp.</p> <p>This is just shorthand instead of writing</p> <pre><code>var now = Math.round(new Date().getTime() / 1000);\n</code></pre>"},{"location":"api/namespaces/utils/#utilsreadinipath-section-key-default_value","title":"<code>utils.ReadINI(path, section, key[, default_value])</code>","text":"Arguments path <code>string</code> section <code>string</code> key <code>string</code> default_value <code>string</code> This will be the return value if the <code>key</code> isn't found. Defaults to an empty string if omitted. <p>Returns a <code>string</code>. The maximum length is limited to 255 characters.</p> <p>An INI file should look something like this:</p> <pre><code>[section]\nkey=val\n</code></pre> <p>Example</p> <pre><code>var username = utils.ReadINI(\"e:\\\\my_file.ini\", \"Last.fm\", \"username\");\n</code></pre>"},{"location":"api/namespaces/utils/#utilsreadtextfilepath-codepage","title":"<code>utils.ReadTextFile(path[, codepage])</code>","text":"Arguments path <code>string</code> codepage <code>number</code> Default <code>0</code>. See utils.DetectCharset. <p>Returns a <code>string</code>. Will be empty if <code>path</code> doesn't exist or there was an error opening it.</p> <p>Note</p> <p>If the file is determined to be <code>UTF16-LE</code> or <code>UTF8</code>, any supplied <code>codepage</code> will be ignored.</p> <p>Example</p> SimpleUsing utils.DetectCharset <pre><code>var path = \"E:\\\\some text file.txt\";\nvar text = utils.ReadTextFile(path);\n</code></pre> <pre><code>var path = \"E:\\\\some text file.txt\";\nvar codepage = utils.DetectCharset(path);\nvar text = utils.ReadTextFile(path, codepage);\n</code></pre>"},{"location":"api/namespaces/utils/#utilsreadutf8path","title":"<code>utils.ReadUTF8(path)</code>","text":"Arguments path <code>string</code> <p>Returns a <code>string</code>. Will be empty if <code>path</code> doesn't exist or there was an error opening it.</p> <p>Note</p> <p>It's preferable to use this when you know the file is <code>UTF8</code>. If you're unsure, continue to use utils.ReadTextFile</p>"},{"location":"api/namespaces/utils/#utilsremovefolderrecursivepath-option","title":"<code>utils.RemoveFolderRecursive(path[, option])</code>","text":"Arguments path <code>string</code> option <code>number</code> Default <code>0</code> which removes the folder and its contents. Supplying <code>1</code> clears the contents but leaves the root folder in place. <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilsremovepathpath","title":"<code>utils.RemovePath(path)</code>","text":"Arguments path <code>string</code> Can be a file or folder. If it's a folder, it must be empty. <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilsrenamepathfrom-to","title":"<code>utils.RenamePath(from, to)</code>","text":"Arguments from <code>string</code> Can be a file or folder. to <code>string</code> <p>Returns a <code>boolean</code> value.</p>"},{"location":"api/namespaces/utils/#utilsreplaceillegalcharsstr-strip_trailing_periods","title":"<code>utils.ReplaceIllegalChars(str[, strip_trailing_periods])</code>","text":"Arguments str <code>string</code> strip_trailing_periods <code>boolean</code> Default <code>false</code>. Set to <code>true</code> if <code>str</code> is a folder name. <p>Returns a <code>string</code>.</p> <p>Example</p> <pre><code>var chars = '\"\\\\\\/*|:&lt;&gt;?';\nconsole.log(utils.ReplaceIllegalChars(chars));\n</code></pre> Output<pre><code>''\u29f5\u2044\u2217\u2223\u2236\u02c2\u02c3\uff1f\n</code></pre>"},{"location":"api/namespaces/utils/#utilsrunapp-params","title":"<code>utils.Run(app[, params])</code>","text":"Arguments app <code>string</code> Can be the path to a file and <code>Windows</code> will open the associated application. params <code>string</code> Defaults to an empty string if omitted. <p>No return value.</p> <p>Example</p> <pre><code>utils.Run('notepad');\nutils.Run('https://www.foobar2000.org');\n\nvar file = ...\nif (utils.IsFile(file)) {\n    utils.Run('explorer', '/select,\"' + file + '\"');\n}\n</code></pre>"},{"location":"api/namespaces/utils/#utilsruncmdasyncwindow_id-app-params","title":"<code>utils.RunCmdAsync(window_id, app, params)</code>","text":"Arguments window_id window.ID app <code>string</code> params <code>string</code> <p>Returns a unique <code>task_id</code> which is used as the first argument in the on_run_cmd_async_done callback.</p> <p>This is for launching command line tools only and they will run in background threads. You'll get notified when complete. The callback will not be called if supplied with a bad <code>app</code> argument.</p>"},{"location":"api/namespaces/utils/#utilssetclipboardtexttext","title":"<code>utils.SetClipboardText(text)</code>","text":"Arguments text <code>string</code> <p>No return value.</p>"},{"location":"api/namespaces/utils/#utilsshowpopupmessagemessage-title","title":"<code>utils.ShowPopupMessage(message[, title])</code>","text":"Arguments message <code>string</code> title <code>string</code> Default <code>JScript Panel</code>. <p>No return value.</p>"},{"location":"api/namespaces/utils/#utilstextboxprompt-title-default_value-help_text","title":"<code>utils.TextBox(prompt, title[, default_value, help_text])</code>","text":"Arguments prompt <code>string</code> title <code>string</code> default_value <code>string</code> Defaults to an empty string if omitted. help_text <code>string</code> Defaults to an empty string it omitted. If not empty, a <code>Help</code> button will show in the dialog. If <code>help_text</code> begins with <code>http</code>, it will launch a web browser otherwise it will open a popup window containing the text. <p>Returns a <code>string</code>.</p> <p>This offers a multi-line text edit area.</p> <p>Note</p> <p>This always throws an error if cancelled so you must use <code>try/catch</code>.</p>"},{"location":"api/namespaces/utils/#utilstimestamptodatestringts","title":"<code>utils.TimestampToDateString(ts)</code>","text":"Arguments ts <code>number</code> Should be the number of seconds since 00:00:00 Thursday, 1 January 1970 UTC. <p>Returns a <code>string</code>. It will be adjusted to your local time zone.</p> <p>Example</p> <pre><code>var now = utils.Now();\nconsole.log(utils.TimestampToDateString(now));\n</code></pre>"},{"location":"api/namespaces/utils/#utilswriteinipath-section-key-value","title":"<code>utils.WriteINI(path, section, key, value)</code>","text":"Arguments path <code>string</code> The parent folder must already exist. section <code>string</code> key <code>string</code> value <code>string</code> <p>Returns a <code>boolean</code> value.</p> <p>Example</p> <pre><code>utils.WriteINI(\"e:\\\\my_file.ini\", \"Last.fm\", \"username\", \"Bob\");\n</code></pre>"},{"location":"api/namespaces/utils/#utilswritetextfilepath-content","title":"<code>utils.WriteTextFile(path, content)</code>","text":"Arguments path <code>string</code> The parent folder must already exist. content <code>string</code> <p>Returns a <code>boolean</code> value.</p> <p>Note</p> <p>Files are written as <code>UTF8</code> without <code>BOM</code>.</p>"},{"location":"api/namespaces/window/","title":"window","text":"<p>Properties</p> window.DPI <code>number</code> read This value is fixed when foobar2000 starts. It will not change even if Windows display settings are updated. window.Height <code>number</code> read window.ID <code>number</code> read Unique identifier for the panel. Use in various <code>async</code> methods. window.IsDark <code>boolean</code> read window.IsDefaultUI <code>boolean</code> read window.IsVisible <code>boolean</code> read Only returns <code>false</code> when panel is hidden in a tab. When covered by other windows, it still returns <code>true</code>. window.MaxHeight <code>number</code> read, write window.MaxWidth <code>number</code> read, write window.MinHeight <code>number</code> read, write window.MinWidth <code>number</code> read, write window.Name <code>string</code> read window.Width <code>number</code> read <p>Methods</p>"},{"location":"api/namespaces/window/#windowclearintervaltimerid","title":"<code>window.ClearInterval(timerID)</code>","text":"Arguments timerID <code>number</code> <p>No return value.</p>"},{"location":"api/namespaces/window/#windowcleartimeouttimerid","title":"<code>window.ClearTimeout(timerID)</code>","text":"Arguments timerID <code>number</code> <p>No return value.</p>"},{"location":"api/namespaces/window/#windowcreatepopupmenu","title":"<code>window.CreatePopupMenu()</code>","text":"<p>Returns an IMenuObj instance.</p>"},{"location":"api/namespaces/window/#windowcreatetooltipfont_name-font_size_px","title":"<code>window.CreateTooltip([font_name, font_size_px)</code>","text":"Arguments font_name <code>string</code> Default <code>Segoe UI</code>. font_size_px <code>number</code> Default <code>16</code>. <p>Returns an ITooltip instance.</p> <p>Note</p> <p>Since it's not permitted to call this more than once in a panel, see the additional window.SetTooltipFont method too.</p>"},{"location":"api/namespaces/window/#windowgetuicolourtype","title":"<code>window.GetUIColour(type)</code>","text":"Arguments type ColourType <p>Returns a <code>number</code> which can used as the <code>colour</code> in many methods.</p>"},{"location":"api/namespaces/window/#windowgetuifonttype","title":"<code>window.GetUIFont(type)</code>","text":"Arguments type FontType <p>See above for the return value.</p>"},{"location":"api/namespaces/window/#windowgetpropertyname-default_value","title":"<code>window.GetProperty(name[, default_value])</code>","text":"Arguments name <code>string</code> default_value <code>string</code>,<code>number</code>,<code>boolean</code> Default <code>null</code>. <p>Returns the value of <code>name</code> from the panel properties. If no value is present and <code>default_value</code> is not <code>null</code> or <code>undefined</code>, it will be stored and returned.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @name \"ColourPicker + Persistent Properties\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar default_colour = RGB(255, 0, 0);\n\n// Default colour is used on first run, otherwise colour\n// saved on previous use.\nvar colour = window.GetProperty('BASIC.COLOUR.PICKER.COLOUR', default_colour);\n\nfunction on_paint(gr) {\n    gr.Clear(colour);\n    gr.FillRectangle(0, 0, window.Width, 24, RGB(0, 0, 0));\n    gr.WriteText('Click to open ColourPicker', '', RGB(255, 255, 255), 0, 0, window.Width, 24, 2, 0);\n}\n\nfunction on_mouse_lbtn_up() {\n    colour = utils.ColourPicker(colour);\n\n    /*\n    Save the new colour and it will be read the next\n    time the script starts. These properties are stored\n    as part of your layout either in theme.fth (Default UI)\n    or foo_ui_columns.cfg (Columns UI),\n    */\n    window.SetProperty('BASIC.COLOUR.PICKER.COLOUR', colour);\n    window.Repaint();\n}\n</code></pre>"},{"location":"api/namespaces/window/#windownotifyothersname-info","title":"<code>window.NotifyOthers(name, info)</code>","text":"Arguments name <code>string</code> info <code>string</code>, <code>number</code>, <code>array</code>, <code>object</code> <p>Listen for notifications in other panels with on_notify_data.</p>"},{"location":"api/namespaces/window/#windowreloadclear_properties","title":"<code>window.Reload([clear_properties])</code>","text":"Arguments clear_properties <code>boolean</code> Default <code>false</code>. <p>No return value.</p>"},{"location":"api/namespaces/window/#windowrepaint","title":"<code>window.Repaint()</code>","text":"<p>No return value.</p>"},{"location":"api/namespaces/window/#windowrepaintrectx-y-w-h","title":"<code>window.RepaintRect(x, y, w, h)</code>","text":"<p>No return value.</p> <p>Note</p> <p>Use this instead of <code>window.Repaint</code> on frequently updated areas such as time, bitrate, seekbar, etc.</p>"},{"location":"api/namespaces/window/#windowsetcursorid","title":"<code>window.SetCursor(id)</code>","text":"Arguments id SetCursorID Use <code>-1</code> if you want to hide the cursor. <p>No return value.</p> <p>Note</p> <p>This would usually be used inside the on_mouse_move callback.</p>"},{"location":"api/namespaces/window/#windowsetintervalfunc-delay","title":"<code>window.SetInterval(func, delay)</code>","text":"Arguments function <code>function</code> delay <code>number</code> milliseconds <p>The return value is the <code>timerID</code> which can be used to cancel it.</p> <p>Creates a timer that will run indefinitely unless cancelled.</p> <p>Example</p> <pre><code>// This runs every 500ms forever because the return\n// was ignored!\nwindow.SetInterval(function () {\n    // do something\n}, 500);\n</code></pre> <p>No return value.</p>"},{"location":"api/namespaces/window/#windowsetplaylistselectiontracking","title":"<code>window.SetPlaylistSelectionTracking()</code>","text":"<p>No return value.</p> <p>Sets selected items to the active playlist selection and enables tracking. When the playlist selection changes, the stored selection is automatically updated.</p> <p>Example</p> <pre><code>// Playlist view example\n\nfunction on_focus(is_focused) {\n    if (is_focused) {\n        // Updates the selection when panel regains focus\n        // but not on every click\n        window.SetPlaylistSelectionTracking();\n    }\n}\n</code></pre>"},{"location":"api/namespaces/window/#windowsetplaylisttracking","title":"<code>window.SetPlaylistTracking()</code>","text":"<p>No return value.</p>"},{"location":"api/namespaces/window/#windowsetpropertyname-value","title":"<code>window.SetProperty(name, value)</code>","text":"Arguments name <code>string</code> value <code>string</code>,<code>number</code>,<code>boolean</code> <p>No return value.</p> <p>Sets a persistent property value. To remove an existing property, you can supply <code>null</code> as the <code>value</code>.</p> <p>See window.GetProperty for an example.</p>"},{"location":"api/namespaces/window/#windowsetselectionhandle_list-type","title":"<code>window.SetSelection(handle_list[, type])</code>","text":"Arguments handle_list IMetadbHandleList type SelectionType Default <code>0</code>. <p>Example</p> <pre><code>// Library viewer example\n\nfunction on_mouse_lbtn_up(x, y) {\n    // Presumably going to select something here...\n    handle_list = ...;\n    window.SetSelection(handle_list, 6);\n}\n</code></pre>"},{"location":"api/namespaces/window/#windowsettimeoutfunc-delay","title":"<code>window.SetTimeout(func, delay)</code>","text":"Arguments function <code>function</code> delay <code>number</code> milliseconds <p>The return value is the <code>timerID</code> which can be used to cancel it.</p> <p>Example</p> <pre><code>window.SetTimeout(function () {\n    // code here will run after 10 seconds, once.\n}, 10000);\n</code></pre>"},{"location":"api/namespaces/window/#windowsettooltipfontfont_name-font_size_px","title":"<code>window.SetTooltipFont(font_name, font_size_px)</code>","text":"Arguments font_name <code>string</code> font_size_px <code>number</code> <p>No return value.</p>"},{"location":"api/namespaces/window/#windowshowconfigure","title":"<code>window.ShowConfigure()</code>","text":"<p>No return value.</p> <p>Shows the Configuration Window.</p>"},{"location":"api/namespaces/window/#windowshowproperties","title":"<code>window.ShowProperties()</code>","text":"<p>No return value.</p> <p>Shows the <code>Properties Window</code> of the current panel.</p>"},{"location":"gallery/","title":"Home","text":"<p>Not all <code>Samples</code> are included here.</p> <p>See the <code>Samples</code> button from the Configuration Window for a complete list. After loading, the right click menu is your friend. Most options should be self explanatory!</p> <p><code>Samples</code> that fetch artist info / images from online sources will cache the results indefinitely inside your foobar2000 profile folder  <code>js_data</code>.</p>"},{"location":"gallery/album-art/","title":"Album Art","text":"<p>This has full parity with <code>Default UI</code> / <code>Columns UI</code> panels where:</p> <ul> <li>The patterns/stub images set in the main <code>Preferences</code> are used.</li> <li>The <code>Prefer larger / Prefer external / Prefer embedded</code> options found under <code>File&gt;Preferences&gt;Advanced&gt;Display&gt;Album Art</code> are respected.</li> <li>Exotic image formats are supported if you have the relevant <code>WIC</code> codecs installed.</li> <li>Displaying images from certain online sources is supported.</li> </ul>"},{"location":"gallery/album-art/#bonus-features","title":"Bonus features","text":"<ul> <li>You can right click the panel&gt;<code>Refresh</code> after changing any <code>Preferences</code> or adding/removing art from a folder/file.</li> <li>Images can be cropped without stretching</li> <li>Customisable double click action to always open image internally, externally or opening the containing folder.</li> <li>Tooltips indicate the original size and path of the image. They even support <code>Dark Mode</code>.</li> <li>Search <code>Google</code> images using <code>%album artist%</code> / <code>%album%</code> tags.</li> </ul>"},{"location":"gallery/album-art/#limitations","title":"Limitations","text":"<ul> <li>Does not support <code>Library viewer</code> selections. Options are playlist based.</li> </ul>"},{"location":"gallery/allmusic/","title":"Allmusic","text":"AllmusicAllmusic + Album Art <p>This pulls album reviews from <code>allmusic.com</code> using <code>%album artist%</code> / <code>%album%</code> tags. Success or failure is reported in the foobar2000 <code>Console</code>.</p>"},{"location":"gallery/images/","title":"Images","text":"<p>This has same ability to display multiple images from a custom folder or download from <code>Last.fm</code> like Thumbs but has no thumbnail functionality.</p> <p>Scroll images using your mouse wheel and check the right click menu for all options.</p>"},{"location":"gallery/jsplaylist/","title":"JS Playlist","text":"<p>This was originally created by Br3tt aka Falstaff.</p> <p></p>"},{"location":"gallery/jsplaylist/#clickable-ratings","title":"Clickable ratings","text":"<p>Note</p> <p>The behaviour of clickable ratings depend on the presence of <code>foo_playcount</code>. When installed, <code>Playback Statistics</code> will be used. Without it, <code>RATING</code> tags are written to your files.</p>"},{"location":"gallery/jsplaylist/#features","title":"Features","text":"<ul> <li>Full drag/drop including to external panels.</li> <li>Customisable group headers with optional front cover display.</li> <li>Smooth Scrolling.</li> <li>Arrange columns using drag/drop.</li> <li>Change colours and fonts in foobar2000 <code>Preferences</code> &gt; <code>Display</code> &gt; <code>DefaultUI</code> or <code>ColumsUI</code>.</li> <li>Alternatively, you can configure independent custom colours from the right click menu.</li> <li>Create custom columns with title formatting and full <code>$rgb</code> support.</li> <li>The <code>MOOD</code> and <code>RATING</code> columns do not support <code>$rgb</code> so their colours can be configured independently via the right click menu.</li> <li>There is a <code>Enable Dynamic</code> colour option. Colours are extracted from the album art of the currently playing track. If active, custom colours / <code>$rgb</code> are ignored.</li> <li>Playlist specific fields like <code>%list_index%</code>, <code>%list_total%</code>, <code>%isplaying%</code>, <code>%queue_index%</code> etc are fully supported.</li> <li>Optional playlist info header.</li> <li>Use album art or a custom image as background wallpaper.</li> <li>Use the middle click mouse button or Tab to open the built in <code>Playlist Manager</code>. This has advanced features  such as the ability to sort playlists by name and apply playlist locks.</li> <li>Check the right click menu and <code>Panel settings</code> for all options.</li> <li>Right click on the columns toolbar to toggle columns on/off. Use the main <code>Panel settings</code> to customise them.</li> <li>Use Ctrl+T to toggle the columns toolbar.</li> <li>Use Ctrl+I to toggle the playlist info panel.</li> <li>Use Ctrl+C, Ctrl+X, Ctrl+V to copy/cut/paste using the <code>Windows Clipboard</code>. Clipboard contents can now be pasted in <code>Windows Explorer</code>.</li> <li>Use F2 to rename active playlist in playlist manager panel.</li> <li>Use F5 to refresh covers.</li> </ul>"},{"location":"gallery/lastfm-bio/","title":"Last.fm Bio","text":"Last.fm BioLast.fm Bio + Images <p>Performs lookups using <code>$meta(artist,0)</code> for the best results. Language can be changed via the right click menu.</p> <p>Displaying Country flags is supported. See the linked page for the required font.</p> <p>Title format is preferred and can be set via the right click menu but values can be scraped from the <code>Born In</code> section shown on the above example.</p>"},{"location":"gallery/lastfm-info/","title":"Last.fm Info","text":"ArtistUser"},{"location":"gallery/lastfm-info/#artist-mode","title":"Artist mode","text":"<p>Performs lookups using <code>$meta(artist,0)</code> for the best results. Can display <code>Similar Artists</code>, <code>Top Tracks</code> and <code>Top Tags</code>.</p>"},{"location":"gallery/lastfm-info/#user-mode","title":"User mode","text":"<p>You'll need to right click and enter your Last.fm username to display charts and recent tracks.</p>"},{"location":"gallery/musicbrainz/","title":"MusicBrainz","text":"<p>Note</p> <p>This script requires <code>MUSICBRAINZ_ARTISTID</code> or <code>MUSICBRAINZ ARTIST ID</code> tags present in your files. It cannot function without them.</p> ReleasesLinks <p></p> <p></p> <p><code>Releases</code> mode displays all the <code>release groups</code> for the given artist. They are clickable so you can read more on MusicBrainz.</p> <p><code>Links</code> mode returns all the manually curated external links for the artist such as their home page/twitter/last.fm/other databases etc.</p>"},{"location":"gallery/play-log/","title":"Play Log","text":"<p>This logs all plays as playback begins. It supports dynamic artist/titles from streams and the title format pattern can be configured from the right click menu. Checks are in place to make sure entries are not duplicated.</p> <p>New entries are inserted at the beginning of the file and the date/time is written.</p> <p></p> <p>There are menu options to set the entry <code>Limit</code> and to <code>Clear</code> the log.</p> <p>The file is saved inside your <code>foobar2000</code> profile as <code>js_data\\play_log.txt</code>.</p>"},{"location":"gallery/properties-other-info/","title":"Properties + Other Info","text":"PropertiesOther Info"},{"location":"gallery/properties-other-info/#properties","title":"Properties","text":"<p>The tag values in the <code>Metadata</code> section are clickable and will create <code>Autoplaylists</code>. The one exception is where recognised <code>MusicBrainz IDs</code> are transformed in to website urls so you can click and read more.</p>"},{"location":"gallery/properties-other-info/#other-info","title":"Other Info","text":"<p>The <code>General</code> and <code>Location</code> sections should be same as from the <code>Properties</code> dialog. Additional information from <code>Playback Statistics</code> and 3rd party components will be exposed if available.</p>"},{"location":"gallery/seekbar-button/","title":"Seekbars + Buttons","text":"<p>Note</p> <p><code>Minimal</code> seekbars are <code>Dark Mode</code> aware and will update themselves when toggled.</p> <p>Note</p> <p>Right click the <code>Stop</code> button in any sample to toggle <code>Stop After Current</code>. It changes colour to indicate that it is enabled. It also updates itself whenever it's toggled via other means.</p>"},{"location":"gallery/smooth-browser/","title":"Smooth Browser","text":"<p>This was originally created by Br3tt aka Falstaff.</p> GridList <p></p> <p></p> <p>Note</p> <p>Performance may appear sluggish on first run/scrolling through new items as copies of the album art are resized and cached. Subsequent loading should be faster.</p>"},{"location":"gallery/smooth-browser/#common-features","title":"Common Features","text":"<ul> <li> <p>2 display modes avaliable:</p> <ul> <li>List</li> <li>Grid</li> </ul> </li> <li> <p>Smooth scrolling.</p> </li> <li>Change colours and fonts in foobar2000 <code>Preferences</code> &gt; <code>Display</code> &gt; <code>DefaultUI</code> or <code>ColumsUI</code>.</li> <li>Alternatively, you can configure independent custom colours from the right click menu.</li> <li>You can also enable dynamic colours extracted from the front cover of the playing item.</li> <li>Use Ctrl+T to toggle the info bar.</li> <li>Use Ctrl + mouse wheel to zoom.</li> </ul>"},{"location":"gallery/smooth-browser/#library-only-features","title":"Library only features","text":"<ul> <li>Use the right click menu to add to current/new/other playlists.</li> <li>Double click to send to playlist and play or just send without playing. Check the right click menu for options.</li> <li>3 group modes are available:<ul> <li>Album (it is expected that compilation albums have a common <code>Album Artist</code> tag)</li> <li>Artist</li> <li>Album Artist</li> </ul> </li> <li>Filter box with full <code>Media Library</code> query support.</li> <li>Multiple selections with the Ctrl / Shift keys are supported.</li> </ul>"},{"location":"gallery/smooth-browser/#playlist-only-features","title":"Playlist only features","text":"<ul> <li>Grouping is by <code>Album</code> only.</li> <li>Single click highlights the selected <code>Album</code> in your playlist viewer.</li> <li>Double click starts playback from the first track of the selected <code>Album</code>.</li> </ul>"},{"location":"gallery/smooth-playlist-manager/","title":"Smooth Playlist Manager","text":"<p>This was originally created by Br3tt aka Falstaff.</p> <p></p>"},{"location":"gallery/smooth-playlist-manager/#features","title":"Features","text":"<ul> <li>Order playlists by dragging items with the mouse. Multi-select is not supported.</li> <li>Sort all playlists by name using the right click menu.</li> <li>Apply playlist locks.</li> <li>Restore deleted playlists which remain for the lifetime of the current foobar2000 session.</li> <li>Cover art or custom image as background supported (including a blur effect).</li> <li>Smooth scrolling.</li> <li>Change colours and fonts in foobar2000 <code>Preferences</code> &gt; <code>Display</code> &gt; <code>DefaultUI</code> or <code>ColumsUI</code>.</li> <li>Alternatively, you can configure independent custom colours from the right click menu.</li> <li>You can also enable dynamic colours extracted from the front cover of the playing item.</li> <li>Use Ctrl+T to toggle the info bar.</li> <li>Use Ctrl + mouse wheel to zoom.</li> </ul>"},{"location":"gallery/smooth-playlist/","title":"Smooth Playlist","text":"<p>This was originally created by Br3tt aka Falstaff.</p> <p></p>"},{"location":"gallery/smooth-playlist/#features","title":"Features","text":"<ul> <li>Variable height group headers with album art. Right click the header bar or scrollbar to change options/turn off grouping.</li> <li>Cover art or custom image as background supported (including a blur effect).</li> <li>Smooth scrolling.</li> <li>Change colours and fonts in foobar2000 <code>Preferences</code> &gt; <code>Display</code> &gt; <code>DefaultUI</code> or <code>ColumsUI</code>.</li> <li>Alternatively, you can configure independent custom colours from the right click menu.</li> <li>You can also enable dynamic colours extracted from the front cover of the playing item.</li> <li>Use Ctrl+T to toggle the info bar.</li> <li>Use Ctrl + mouse wheel to zoom.</li> <li>Use Ctrl+C, Ctrl+X, Ctrl+V to copy/cut/paste using the <code>Windows Clipboard</code>. Clipboard contents can now be pasted in <code>Windows Explorer</code>.</li> <li>Playlist search behaves similarly to the native <code>foobar2000</code> playlist search where matching items are highlighted in the playlist. Press F3 to jump to the next result.</li> </ul>"},{"location":"gallery/smooth-playlist/#limitations","title":"Limitations","text":"<ul> <li>This is very basic and is in no way equivalent to a proper playlist viewer.</li> </ul>"},{"location":"gallery/spectrogram-seekbar/","title":"Spectrogram Seekbar","text":"<p>This script requires <code>ffmpeg</code> to decode the audio track and generate the image which is cached and used as the background for the seekbar.</p> <p>For obvious reasons, only local files with a known length are supported.</p>"},{"location":"gallery/spectrogram-seekbar/#setup","title":"Setup","text":"<p>You can download ffmpeg from here.</p> <p>https://www.gyan.dev/ffmpeg/builds/</p> <p>For best results <code>ffmpeg</code> <code>6.0</code> or later should be used.</p> <p>By default, the script will look for it inside your foobar2000 profile folder. If you wish to change this, edit the script where there is a note next to it.</p> <p>See here for available <code>ffmpeg</code> options which can be set via the right click menu.</p> <p>https://ffmpeg.org/ffmpeg-filters.html#showspectrumpic</p> <p>Do not set <code>legend</code> as that is already disabled.</p>"},{"location":"gallery/text-display/","title":"Text Display","text":"Text onlyAlbum Art top, Text bottom <p>These are just some of the options available via the right click menu:</p> <ul> <li>Text alignment.</li> <li>Album Art and/or blurred background.</li> <li>Per-second updates.</li> <li>Custom background colour independent of UI colour.</li> </ul>"},{"location":"gallery/text-display/#title-formatting","title":"Title Formatting","text":"<p>Playlist only fields like <code>%list_index%</code>, <code>%list_total%</code>, etc are supported.</p> <p>A custom <code>$font</code> function and <code>$rgb</code> are also supported. You can read more here.</p> <p>Also, you can check Country Flags if you store countries in your tags.</p> <p><code>%jsp_playlist_name%</code> should be self explanatory.</p> <p>Finally ,<code>$jsp_since</code> can display the difference between now and a given date/time string. Use with <code>Playback Statistics</code> <code>%last_played%</code> or similar.</p> <pre><code>$jsp_since(%last_played%)\n</code></pre> <p>could display something like <code>5wk 2d</code>.</p>"},{"location":"gallery/text-display/#limitations","title":"Limitations","text":"<p>Unlike the original <code>foo_textdisplay</code> component there is no support for clickable links. Also, there are no scrollbars. Use the mouse wheel to scroll when there is too much content to fit in the panel.</p>"},{"location":"gallery/text-reader/","title":"Text Reader","text":"<p>Use this for displaying the contents of text files. The path used and title are fully customisable with title formatting. You can also specify a folder path and the first <code>txt</code> or <code>log</code> file within will be displayed.</p>"},{"location":"gallery/thumbs/","title":"Thumbs","text":"<p>Note</p> <p>The latest versions limit themselves to loading no more than 64MB of files from disk. This is to prevent out of memory errors that may have adverse affects on the stability/performance of the whole application.</p> <p>By default it will display multiple images (if present) inside the same folder as the playling/selected file. The folder path can be configured via the right click menu.</p> <p>Alternatively, you can put it Last.fm mode and it can download artist images. Automatic downloads are enabled by defaul but that can be turned off and you may trigger downoads manually.</p> <p>There are many options for thumbnail size and alignment via the right click menu. Circular thumbnails can also be enabled.</p>"},{"location":"gallery/vu-meter/","title":"VU Meter","text":"<p>This was written by <code>Case</code> because I have no idea how to the use real time audio data provided by fb.GetAudioChunk.</p> <p>Check the right click menu for all of its options. Labels can be hidden if you resize it small enough.</p>"},{"location":"guides/country-flags/","title":"Country Flags","text":"<p>Note</p> <p>This requires that you have the Twemoji Mozilla font installed.</p> <p>While it has always been possible to display flags with images or writing your own scripts to make use of emoji, this details some helper methods which have been added to make it easier.</p>"},{"location":"guides/country-flags/#title-formatting","title":"Title formatting","text":"<p>Note</p> <p>These examples assume you have a supported value inside a <code>%country%</code> tag. Adjust as necessary.</p> <p>A <code>$country_flag</code> function has been added and you can use it like this:</p> <pre><code>$font(Twemoji Mozilla,16)$country_flag(%country%)\n</code></pre> <p>Note</p> <p>The use of <code>$font</code> is detailed here.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\n// $font() with no args resets back to the default_font supplied to\n// DrawStyledText in on_paint\n// also includes $rgb example\nvar tfo = fb.TitleFormat(\n    \"[$font(Twemoji Mozilla,18)$country_flag(%country%)$font() ]$rgb(255,0,0)%artist%\"\n);\nvar str = \"\";\n\nrefresh();\n\nfunction refresh() {\n    var item = fb.GetFocusItem();\n    if (item) {\n        str = tfo.EvalWithMetadb(item);\n    } else {\n        str = \"\";\n    }\n}\n\nfunction on_item_focus_change() {\n    refresh();\n    window.Repaint();\n}\n\nfunction on_playlist_switch() {\n    refresh();\n    window.Repaint();\n}\n\nfunction on_paint(gr) {\n    // default_font is an empty string, defaulting to Segoe UI, 16px\n    gr.WriteText(str, \"\", 0, 0, 0, window.Width, window.Height, 2, 2);\n}\n</code></pre>"},{"location":"guides/country-flags/#javascript","title":"JavaScript","text":"<p>If you prefer not to use title formatting, you can use <code>utils.GetCountryFlag</code> method which accepts a 2 letter country code or the full country name. See supported values. An empty string will be returned on failure.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar font = CreateFontString(\"Twemoji Mozilla\", 24);\nvar flag = utils.GetCountryFlag(\"GB\");\n\nfunction on_paint(gr) {\n    gr.WriteText(flag, font, 0, 0, 0, window.Width, window.Height, 2, 2);\n}\n</code></pre>"},{"location":"guides/country-flags/#supported-values","title":"Supported values","text":"<p>Case is not important. You can supply the code or full name. A few examples:</p> gb United Kingdom fr France de Germany <p>A complete list of supported values can be found in this file: countries.json</p>"},{"location":"guides/font-rgb/","title":"$font & $rgb","text":""},{"location":"guides/font-rgb/#rgb","title":"$rgb","text":"<p>You can use these colour methods which are documented here.</p> <pre><code>$rgb(r,g,b) // only the 3 value variant is supported\n$rgb()\n$hsl(h,s,l) // only the 3 value variant is supported\n$hsl()\n$blend(colour1,colour2,part,total)\n$transition(string,colour1,colour2)\n</code></pre>"},{"location":"guides/font-rgb/#font","title":"$font","text":"<p>This is not a common function and is exclusive to <code>JScript Panel</code>. It takes up to 6 values.</p> <p><code>$font(name,size,weight,style,underline,strikethrough)</code></p> <p>If changing the font, you must the supply the <code>name</code> and <code>size</code> values. The rest are optional.</p> Value size Supported values are <code>8</code> - <code>144</code>. weight Default <code>400</code>, <code>700</code> is bold. Supported values are <code>100</code> - <code>950</code>. style Default <code>0</code>. Use <code>1</code> for <code>oblique</code> or <code>2</code> for <code>italic</code>. underline Default <code>0</code>. Use <code>1</code> to enable. strikethrough Default <code>0</code>. Use <code>1</code> to enable. <p>You can use <code>$font()</code> with no values to reset back to default.</p>"},{"location":"guides/fonts/","title":"Fonts","text":"<p>This page is for working with fonts that are passed to IJSGraphics WriteText, IJSGraphics WriteTextSimple and utils.CreateTextLayout.</p> <p>Unlike previous versions of <code>JScript Panel</code>, fonts need to be supplied as strings. They can be created manually by using <code>JSON.stringify</code> on an object or returned from <code>window.GetUIFont</code>.</p> <p>These are all of the supported properties but none are mandatory.</p> <pre><code>var font = JSON.stringify({\n    Name : name, // string\n    Size : size, // number\n    Weight : weight, // number\n    Style : style, // number\n    Stretch : stretch, // number\n    Underline : underline, // boolean\n    Strikethrough : strikethrough, // boolean\n});\n</code></pre> <p>Note</p> <p><code>IJSGraphics WriteTextSimple</code> does not support <code>Underline</code> or <code>Strikethrough</code>.</p> <p>See Flags for supported <code>Weight</code>, <code>Style</code> and <code>Stretch</code> values.</p> <p>You can even supply an empty string and defaults of <code>Segoe UI</code> and <code>16px</code> will be used.</p> <p>Example</p> <pre><code>var font_str = \"\";\nvar colour = RGB(0, 0, 0);\ngr.WriteText(\"some text\", font_str, colour, 0, 0, window.Width, window.Height);\n</code></pre>"},{"location":"guides/fonts/#using-windowgetuifont","title":"Using <code>window.GetUIFont</code>.","text":"<p>Example</p> <pre><code>var font_str = window.GetUIFont(0);\nconsole.log(font_str);\n</code></pre> Example output<pre><code>{\n    \"Name\": \"Segoe UI\",\n    \"Size\": 12,\n    \"Stretch\": 5,\n    \"Style\": 0,\n    \"Weight\": 400\n}\n</code></pre> <p><code>font_str</code> can be passed directly without modification.</p> <p>Example</p> <pre><code>var font_str = window.GetUIFont(0);\nvar colour = RGB(0, 0, 0);\n\nfunction on_paint(gr) {\n    gr.WriteText(\"some text\", font_str, colour, 0, 0, window.Width, window.Height);\n}\n</code></pre> <p>Note</p> <p>Not all fonts supported by <code>Default UI</code> can be used by this component. This is because it uses older <code>GDI</code> graphics whereas this component uses <code>DirectWrite</code>. If an unsupported font is detected, the method will fallback to returning <code>Segoe UI</code>. The most likely cause of this happening would be using <code>Raster</code> fonts like <code>System</code> or <code>Small Fonts</code>.</p> <p>If you want to manipulate any of the properties, you can use <code>JSON.parse</code> on the string, make the changes and then stringify it again.</p> <p>Example</p> <pre><code>var font_str = window.GetUIFont(0);\nvar font_obj = JSON.parse(font_str);\n\n// double the size, leave other properties untouched.\nfont_obj.Size = font_obj.Size * 2;\n\nfont_str = JSON.stringify(font_obj);\n</code></pre>"},{"location":"guides/fonts/#creating-your-own-from-scratch","title":"Creating your own from scratch","text":"<p>Writing your own <code>JSON.stringify</code> statement for every font you create would be a bit cumbersome so <code>helpers.txt</code> contains a simplified method to use anywhere.</p> <pre><code>function CreateFontString(name, size, bold) {\n    return JSON.stringify({\n        Name : name,\n        Size : Math.round(size * DPI / 72), // DPI comes from window.DPI\n        Weight : bold ? DWRITE_FONT_WEIGHT_BOLD : DWRITE_FONT_WEIGHT_NORMAL\n    });\n}\n</code></pre> <p>Now it's easier to write...</p> <pre><code>var font = CreateFontString(\"Verdana\", 16);\nvar large_bold_font = CreateFontString(\"Verdana\", 24, true);\n</code></pre> <p>You can of course write your own if you need more customisation.</p>"},{"location":"guides/fonts/#advanced-usage","title":"Advanced usage","text":"<p>You can also create an array of fonts and apply them to a single string. You can style each word or even character independently. See Styling Ranges Of Text.</p>"},{"location":"guides/gradients/","title":"Gradients","text":"<p>Note</p> <p><code>gr</code> on this page refers to IJSGraphics</p> <p>Using <code>gr.FillRectangle</code> as an example, most will know the last argument is a <code>number</code> to represent a colour.</p> <pre><code>gr.FillRectangle(x, y, w, h, colour);\n</code></pre> <p>The colour argument can also be <code>string</code>. This represents a <code>brush</code> which is described below.</p>"},{"location":"guides/gradients/#stops","title":"Stops","text":"<p>Before creating a <code>brush</code>, we need to define the colours we want to use. So the first thing to do is create an array of stops. In this component, an array of <code>stops</code> must be at least <code>2</code> in length.</p> <p>A <code>stop</code> is a <code>position</code> and a <code>colour</code>. The min/max values for a <code>position</code> is <code>0</code> and <code>1</code>. Anyone reading this should be familiar with valid <code>colour</code> values!</p> <p>So the simplest example can be:</p> <pre><code>var stops = [\n    [0, RGB(255, 0, 0)],\n    [1, RGB(0, 0, 255)],\n];\n</code></pre> <p>If you want to insert more colours:</p> <pre><code>var stops = [\n    [0, RGB(255, 0, 0)],\n    [0.5, RGB(0, 255, 0)],\n    [1, RGB(0, 0, 255)],\n];\n</code></pre>"},{"location":"guides/gradients/#linear-brush","title":"Linear brush","text":"<p>Now we know what <code>stops</code> are, we can create a linear brush.</p> <p>A linear brush must have 3 properties: <code>Start</code>, <code>End</code> and <code>Stops</code>.</p> <pre><code>var linear_brush = {\n    Start : [0, 0], // x and y values\n    End : [0, 0], // x and y values\n    Stops: stops\n};\n</code></pre> <p>The <code>Start</code> and <code>End</code> values are relative to the <code>x</code> and <code>y</code> positions of the rectangle.</p> <p>If we lift <code>FillGradientRectangle</code> from <code>helpers.txt</code>, we can inspect a working example.</p> <pre><code>function FillGradientRectangle(gr, x, y, w, h, direction, colour1, colour2) {\n    var stops = [\n        [0, colour1],\n        [1, colour2]\n    ];\n\n    var brush = {Start : [0, 0], Stops: stops};\n\n    if (direction == 0) // vertical\n        brush.End = [0, h];\n    else // horizontal\n        brush.End = [w, 0];\n\n    gr.FillRectangle(x, y, w, h, JSON.stringify(brush));\n}\n</code></pre> <p>Note</p> <p>See the final step there is to use <code>JSON.stringify</code> on the <code>brush</code> object. <code>JavaScript</code> objects can not be passed directly to the component so it must be a <code>string</code>.</p> <p>The <code>Start</code> <code>x</code> and <code>y</code> values never change. The <code>End</code> positions change depending on the effect you want.</p> <p>While that example is fixed to vertical or horizontal, there are no limitations when creating your own.</p> <p>For a diagonal effect, you can do something like this:</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar stops = [\n    [0, RGB(255, 0, 0)],\n    [1, RGB(0, 0, 255)],\n];\n\nvar linear_brush = {\n    Stops: stops,\n    Start: [0, 0]\n};\n\nfunction on_paint(gr) {\n    linear_brush.End = [window.Width, window.Height];\n    gr.FillRectangle(0, 0, window.Width, window.Height, JSON.stringify(linear_brush));\n}\n</code></pre>"},{"location":"guides/styling-ranges-text/","title":"Styling Ranges Of Text","text":"<p>Note</p> <p>If any text you pass to <code>IJSGraphics WriteText</code> or <code>utils.CreateTextLayout</code> contain <code>$rgb</code>/<code>$font</code> code, any colour/font arrays described on this page will be ignored. Title formatting always take precedence.</p>"},{"location":"guides/styling-ranges-text/#using-ijsgraphics-writetext","title":"Using <code>IJSGraphics WriteText</code>","text":"<p>This first example uses IJSGraphics WriteText where you can apply custom fonts/colours to a single string.</p> <p>The limitation here is that scrolling text vertically is not supported so if you need that, you'll need to use the <code>utils.CreateTextLayout</code> examples below.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @name \"WriteTextStyles\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\n/*\nThis sample splits a string in to whole words and then randomly\nstyles each one. Every element of the array which is used for\nstyling must have a valid start/length value. You can see\nhow the start value is incremented for each word.\n*/\n\nvar installed_fonts = utils.ListFonts().toArray();\nvar text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\nvar colour_string = '';\nvar font_string = '';\n\n// split text in to whole words for styling\nvar words = text.split(' ');\n\nrefresh();\n\nfunction refresh() {\n    var fonts = [], colours = [];\n    var start = 0;\n\n    words.forEach(function(word, i) {\n        // length of word plus following space\n        var len = word.length + 1;\n\n        colours.push({\n            // when using an array of colours, Start and Length are mandatory\n            Start : start,\n            Length : len,\n            Colour : RGB(Math.random() * 200, Math.random() * 200, Math.random() * 200),\n        });\n\n        fonts.push({\n            // when using an array of fonts, Start and Length are mandatory\n            Start : start,\n            Length : len,\n            // the following are all optional and may be omitted. Segoe UI/16px will be used if Name/Size are not specified.\n            Name : installed_fonts[Math.floor(Math.random() * installed_fonts.length)],\n            Size : 12 + Math.floor(Math.random() * 20),\n            Weight : Math.round(Math.random() * 800) + 100, // values between 100-900\n            Underline : Math.random() &lt; 0.1,\n            Strikethrough : Math.random() &lt; 0.1,\n        });\n\n        // increment start position for next word\n        start += len;\n    });\n\n    colour_string = JSON.stringify(colours);\n    font_string = JSON.stringify(fonts);\n}\n\nfunction on_paint(gr) {\n    gr.WriteText(text, font_string, colour_string, 10, 10, window.Width - 20, window.Height - 20);\n}\n</code></pre>"},{"location":"guides/styling-ranges-text/#using-utilscreatetextlayout","title":"Using <code>utils.CreateTextLayout</code>","text":"<p>This example demonstrates scrollable text, a single font and a different colour per word.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @name \"SimpleScroll + Coloured Text\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\n// see CreateFontString in helpers.txt\nvar font = CreateFontString('Segoe UI', 24);\nvar text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\nvar layout = utils.CreateTextLayout(text, font);\nvar offset = 0;\nvar text_height = 0;\n\n// split text in to whole words for colouring\nvar words = text.split(' ');\nvar colour_string = '';\n\nrefresh();\n\nfunction refresh() {\n    var colours = [];\n    var start = 0;\n    words.forEach(function(word, i) {\n        var len = word.length + 1;\n        colours.push({\n            // when using an array, Start and Length are mandatory\n            Start : start,\n            Length : len,\n            Colour : RGB(Math.random() * 200, Math.random() * 200, Math.random() * 200),\n        });\n        start += len;\n    });\n    colour_string = JSON.stringify(colours);\n}\n\nvar box = {\n    x : 50,\n    y : 50,\n    w : 0,\n    h : 0,\n}\n\nfunction on_paint(gr) {\n    gr.Clear(RGB(255, 255, 255));\n    gr.DrawRectangle(box.x, box.y, box.w, box.h, 1, RGB(255, 0, 0));\n    gr.WriteTextLayout(layout, colour_string, box.x, box.y, box.w, box.h, offset);\n}\n\nfunction on_mouse_wheel(step) {\n    if (text_height &lt; box.h) return;\n    offset += step * 60;\n    if (offset &gt; 0) offset = 0;\n    else if (offset &lt; box.h - text_height) offset = box.h - text_height;\n    window.Repaint();\n}\n\nfunction on_size() {\n    box.w = window.Width / 2;\n    box.h = window.Height / 2;\n    text_height = layout.CalcTextHeight(box.w);\n    if (text_height &lt; box.h) offset = 0;\n    else if (offset &lt; box.h - text_height) offset = box.h - text_height;\n}\n</code></pre> <p>This example demonstrates scrollable text, per-word colouring and per-word fonts.</p> <p>Example</p> <pre><code>// ==PREPROCESSOR==\n// @name \"SimpleScroll + Styled Text\"\n// @author \"marc2003\"\n// @import \"%fb2k_component_path%helpers.txt\"\n// ==/PREPROCESSOR==\n\nvar installed_fonts = utils.ListFonts().toArray();\nvar text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\nvar layout = null;\nvar offset = 0;\nvar text_height = 0;\nvar colour_string = '';\n\n// split text in to whole words for styling\nvar words = text.split(' ');\n\nrefresh();\n\nfunction refresh() {\n    var fonts = [];\n    var colours = [];\n    var start = 0;\n    words.forEach(function(word, i) {\n        // length of word plus following space\n        var len = word.length + 1;\n\n        fonts.push({\n            // When using an array of fonts, Start and Length are mandatory\n            Start : start,\n            Length : len,\n            // The following are all optional and may be omitted.\n            // Segoe UI/16px will be used if Name/Size are not specified.\n            Name : installed_fonts[Math.floor(Math.random() * installed_fonts.length)],\n            Size : 12 + Math.floor(Math.random() * 20),\n            Weight : Math.round(Math.random() * 800) + 100, // values between 100-900\n            Underline : Math.random() &lt; 0.1,\n            Strikethrough : Math.random() &lt; 0.1,\n        });\n\n        colours.push({\n            // When using an array of colours, Start and Length are mandatory\n            Start : start,\n            Length : len,\n            Colour : RGB(Math.random() * 200, Math.random() * 200, Math.random() * 200),\n        });\n\n        // increment start position for next word\n        start += len;\n    });\n\n    // Stringify the fonts and create the text layout\n    var font_string = JSON.stringify(fonts);\n    layout = utils.CreateTextLayout(text, font_string);\n\n    // Stringify the colours. This is passed to WriteTextLayout inside on_paint\n    colour_string = JSON.stringify(colours);\n}\n\nvar box = {\n    x : 50,\n    y : 50,\n    w : 0,\n    h : 0,\n}\n\nfunction on_paint(gr) {\n    gr.Clear(RGB(255, 255, 255));\n    gr.DrawRectangle(box.x, box.y, box.w, box.h, 1, RGB(255, 0, 0));\n\n    /*\n    The 2nd arg of gr.WriteTextLayout is the colour which can be a\n    number if you want the same colour for the whole range of text.\n\n    In this example, we're using the stringified colours array created in the\n    refresh method above.\n    */\n    gr.WriteTextLayout(layout, colour_string, box.x, box.y, box.w, box.h, offset);\n}\n\nfunction on_mouse_wheel(step) {\n    if (text_height &lt; box.h) return;\n    offset += step * 60;\n    if (offset &gt; 0) offset = 0;\n    else if (offset &lt; box.h - text_height) offset = box.h - text_height;\n    window.Repaint();\n}\n\nfunction on_size() {\n    box.w = window.Width / 2;\n    box.h = window.Height / 2;\n    text_height = layout.CalcTextHeight(box.w);\n    if (text_height &lt; box.h) offset = 0;\n    else if (offset &lt; box.h - text_height) offset = box.h - text_height;\n}\n</code></pre>"},{"location":"guides/web-requests/","title":"Web Requests","text":"<p>Note</p> <p>This is for fetching plain text only. See utils.DownloadFileAsync for downloading binary files or utils.DownloadImageAsync for downloading images in memory.</p> <p>See also: utils.HTTPRequestAsync and on_http_request_done.</p>"},{"location":"guides/web-requests/#get-requests","title":"GET requests","text":"<p>These examples look at making the request first. Handling the response is detailed below.</p> <p>The simplest request can be done like this:</p> <pre><code>var url = ...\nvar GET = 0;\n\n// because we're omitting a user agent or headers, a\n// default based on the component name/version will be used.\nvar id = utils.HTTPRequestAsync(window.ID, GET, url);\n</code></pre> <p>If you want to supply your own user agent, it can be a simple string like this:</p> <pre><code>var url = ...\nvar GET = 0;\nvar user_agent = \"my_app/0.1\";\nvar id = utils.HTTPRequestAsync(window.ID, GET, url, user_agent);\n</code></pre> <p>If you want to supply custom headers, you can supply a stringified object like this:</p> <pre><code>var headers = JSON.stringify({\n    \"User-Agent\" : \"my_app/0.1\",\n    \"Some other header\" : \"blah\",\n});\n\nvar url = ...\nvar GET = 0;\nvar id = utils.HTTPRequestAsync(window.ID, GET, url, headers);\n</code></pre> <p>When scraping HTML from a website, you might need to set a <code>Referer</code> based on the website you're accessing and a <code>User-Agent</code> based on a browser like this:</p> <pre><code>var headers = JSON.stringify({\n    'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0',\n    'Referer' : 'https://www.last.fm',\n});\n\nvar url = ...\nvar GET = 0;\nvar id = utils.HTTPRequestAsync(window.ID, GET, url, headers);\n</code></pre>"},{"location":"guides/web-requests/#post-requests","title":"POST requests","text":"<p>Here's a simple <code>POST</code> example.</p> <pre><code>var headers = JSON.stringify({\n    \"Content-Type\" : \"application/json\",\n});\n\nvar url = ...\nvar POST = 1;\nvar obj = ...\nvar body = JSON.stringify(obj);\nvar id = utils.HTTPRequestAsync(window.ID, POST, url, headers, body);\n</code></pre>"},{"location":"guides/web-requests/#handling-the-response","title":"Handling the response","text":"<p>When a web request is completed, the <code>on_http_request_done</code> callback is called.</p> <p>Most included samples don't care about the type of failure and report the <code>response_text</code> to the <code>Console</code> like this:</p> <pre><code>// the task_id is the return value from the utils.HTTPRequestAsync call\nfunction on_http_request_done(task_id, success, response_text, status, headers) {\n    if (!success) {\n        console.log(window.Name, \": \", response_text);\n        return;\n    }\n\n    // if we get here, do something useful with the response_text\n}\n</code></pre> <p>If <code>success</code> is <code>true</code>, it only means the server responded. You may have enccountered a server error and this can be checked with the <code>status</code>. It will be <code>200</code> for complete success and I'm sure everyone is familiar with <code>404</code> for page not found.</p> <p>If <code>success</code> is <code>false</code>, the <code>status</code> should always be <code>0</code> and the <code>response_text</code> should describe the error.</p> <p>Lastly, the <code>response headers</code> can be inspected but only when <code>success</code> is <code>true</code>.</p> <pre><code>if (success) {\n    var obj = JSON.parse(response_headers);\n    // do something\n}\n</code></pre>"},{"location":"guides/web-requests/#examples","title":"Examples","text":"<p>This first example is designed to fail on purpose by using a url to an image. Only plain text responses are supported:</p> <pre><code>var GET = 0;\nvar url = \"https://lastfm.freetls.fastly.net/i/u/770x0/59f6ae4009bc475baf4f5581dd0afe28.jpg\";\nvar id = utils.HTTPRequestAsync(window.ID, GET, url);\n\n// the task_id is the return value from the utils.HTTPRequestAsync call\nfunction on_http_request_done(task_id, success, response_text, status, headers) {\n    utils.ShowPopupMessage(response_text);\n}\n</code></pre> <p>The following text should be displayed:</p> <pre><code>Unsupported content type: image/jpeg\n</code></pre> <p>This should succeed:</p> <pre><code>var GET = 0;\nvar url = \"https://www.last.fm/\";\nvar id = utils.HTTPRequestAsync(window.ID, GET, url);\n\n// the task_id is the return value from the utils.HTTPRequestAsync call\nfunction on_http_request_done(task_id, success, response_text, status, headers) {\n    utils.ShowPopupMessage(response_text);\n}\n</code></pre>"}]}